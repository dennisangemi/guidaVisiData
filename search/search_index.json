{"config":{"indexing":"full","lang":["it"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"VisiData: il coltellino svizzero per i dati, che probabilmente non conosci \u00b6 VisiData \u00e8 un fantastico strumento open source per esplorare e manipolare dati. Mette insieme la chiarezza di un foglio di calcolo , con l'efficienza del terminale e la potenza di Python , in una utility leggera in grado di gestire milioni di righe con facilit\u00e0. La presentazione ufficiale fa un'ottima sintesi, ma non evidenzia la cosa che colpisce pi\u00f9: quella di Saul Pwanson (il creatore di VisiData) \u00e8 prima di ogni altra cosa una grande idea . Lo si capisce usandolo e speriamo che emerga anche leggendo questa guida. Per usarlo non \u00e8 necessario essere uno sviluppatore ; se si conosce un po' Python , sar\u00e0 possibile usarlo in modo ancora pi\u00f9 sorprendente. Perch\u00e9 usarlo \u00b6 \u00c8 rapido , apre quasi istantaneamente file di diverse decine di megabyte ; \u00e8 agile , rende semplice la ricerca , il filtraggio , l' ordinamento ,il join e la ristrutturazione di dati tabellari; consente di avere in pochi passaggi una visione di insieme dei dataset su cui si vuole lavorare; apre molti dei formati tipici di testo strutturato (csv, tsv, xlsx , xls, json, xml, sqlite, shp, html, hdf5, xpt, sas7bdat, sav, dta) si utilizza soltanto da tastiera , ed \u00e8 possibile dimenticarsi del mouse; \u00e8 free ed open source . Sorprende la sua rapidit\u00e0 e come offra in modo agile una visione di insieme dei dati. Questo, affiancato all'utilizzo da tastiera, lo rende un prodotto che d\u00e0 una marcia in pi\u00f9 a chi lo usa. Leggi la guida","title":"Home"},{"location":"#visidata-il-coltellino-svizzero-per-i-dati-che-probabilmente-non-conosci","text":"VisiData \u00e8 un fantastico strumento open source per esplorare e manipolare dati. Mette insieme la chiarezza di un foglio di calcolo , con l'efficienza del terminale e la potenza di Python , in una utility leggera in grado di gestire milioni di righe con facilit\u00e0. La presentazione ufficiale fa un'ottima sintesi, ma non evidenzia la cosa che colpisce pi\u00f9: quella di Saul Pwanson (il creatore di VisiData) \u00e8 prima di ogni altra cosa una grande idea . Lo si capisce usandolo e speriamo che emerga anche leggendo questa guida. Per usarlo non \u00e8 necessario essere uno sviluppatore ; se si conosce un po' Python , sar\u00e0 possibile usarlo in modo ancora pi\u00f9 sorprendente.","title":"VisiData: il coltellino svizzero per i dati, che probabilmente non conosci"},{"location":"#perche-usarlo","text":"\u00c8 rapido , apre quasi istantaneamente file di diverse decine di megabyte ; \u00e8 agile , rende semplice la ricerca , il filtraggio , l' ordinamento ,il join e la ristrutturazione di dati tabellari; consente di avere in pochi passaggi una visione di insieme dei dataset su cui si vuole lavorare; apre molti dei formati tipici di testo strutturato (csv, tsv, xlsx , xls, json, xml, sqlite, shp, html, hdf5, xpt, sas7bdat, sav, dta) si utilizza soltanto da tastiera , ed \u00e8 possibile dimenticarsi del mouse; \u00e8 free ed open source . Sorprende la sua rapidit\u00e0 e come offra in modo agile una visione di insieme dei dati. Questo, affiancato all'utilizzo da tastiera, lo rende un prodotto che d\u00e0 una marcia in pi\u00f9 a chi lo usa. Leggi la guida","title":"Perch\u00e9 usarlo"},{"location":"aiuto/","text":"Aiuto \u00b6 Dove chiedere aiuto \u00b6 Due i luoghi principali dove chiedere aiuto , segnalare bug , e fare proposte su VisiData : la pagina ufficiale delle issue ; la pagina ufficiale delle discussioni . \u00c8 bene farlo scrivendo sempre la versione di VisiData utilizzata, allegando i dati per replicare eventuali problemi riscontrati, documentando la procedura che si vuole realizzare. Se invece vuoi fare qualche domanda, o proposta, su questa guida , usa per favore le discussioni . URL consigliati \u00b6 la guida di Jeremy Singer Vine https://jsvine.github.io/intro-to-visidata/ le ricette sul sito ufficiale http://visidata.org/docs/ ; la documentazione ufficiale http://visidata.org/man/ ; la playlist YouTube a cura dell'autore https://www.youtube.com/playlist?list=PLxu7QdBkC7drrAGfYzatPGVHIpv4Et46W .","title":"Aiuto"},{"location":"aiuto/#aiuto","text":"","title":"Aiuto"},{"location":"aiuto/#dove-chiedere-aiuto","text":"Due i luoghi principali dove chiedere aiuto , segnalare bug , e fare proposte su VisiData : la pagina ufficiale delle issue ; la pagina ufficiale delle discussioni . \u00c8 bene farlo scrivendo sempre la versione di VisiData utilizzata, allegando i dati per replicare eventuali problemi riscontrati, documentando la procedura che si vuole realizzare. Se invece vuoi fare qualche domanda, o proposta, su questa guida , usa per favore le discussioni .","title":"Dove chiedere aiuto"},{"location":"aiuto/#url-consigliati","text":"la guida di Jeremy Singer Vine https://jsvine.github.io/intro-to-visidata/ le ricette sul sito ufficiale http://visidata.org/docs/ ; la documentazione ufficiale http://visidata.org/man/ ; la playlist YouTube a cura dell'autore https://www.youtube.com/playlist?list=PLxu7QdBkC7drrAGfYzatPGVHIpv4Et46W .","title":"URL consigliati"},{"location":"cheatsheet/","text":"Abbiamo tradotto in italiano il cheat-sheet di VisiData, creato da Jeremy Singer Vine, disponibile in HTML e PDF . La versione fronte retro a cura di Gianni Vitrano \u00b6 Gianni Vitrano di OpenDataSicilia a partire da questo cheat-sheet, ha creato la versione da stampare fronte retro a \"libretto\" . Grazie Gianni!","title":"Cheat-sheet"},{"location":"cheatsheet/#la-versione-fronte-retro-a-cura-di-gianni-vitrano","text":"Gianni Vitrano di OpenDataSicilia a partire da questo cheat-sheet, ha creato la versione da stampare fronte retro a \"libretto\" . Grazie Gianni!","title":"La versione fronte retro a cura di Gianni Vitrano"},{"location":"comandi/","text":"Altri comandi \u00b6 Ctrl+E : Visualizza il traceback per l'errore pi\u00f9 recente gCtrl+E : Visualizza il traceback per gli errori pi\u00f9 recenti zCtrl+E : Visualizza il trackback per l'errore nella cella corrente","title":"Comandi"},{"location":"comandi/#altri-comandi","text":"Ctrl+E : Visualizza il traceback per l'errore pi\u00f9 recente gCtrl+E : Visualizza il traceback per gli errori pi\u00f9 recenti zCtrl+E : Visualizza il trackback per l'errore nella cella corrente","title":"Altri comandi"},{"location":"configurazione/","text":"Configurazione \u00b6 In VisiData \u00e8 possibile utilizzare un file di configurazione, per personalizzare alcune caratteristiche: i colori dell'applicazione, le funzioni disponibili, l'interfaccia, ecc.. Questo file di default si chiama .visidatarc e VisiData lo cerca nella cartella home dell'utente, quindi ~/.visidatarc . Se non \u00e8 presente, \u00e8 da creare e da riempire con le istruzioni di configurazione che si desiderano. Esempi. \u00b6 Attivare contatore di righe e colonne \u00b6 \u00c8 molto comodo, ma non \u00e8 disponibile by default , poter aver nell'interfaccia di VisiData un'indicazione con (vedi figura sotto): riga corrente; righe totali; numero di righe selezionate; colonna corrente; colonne totali. Per attivare la cosa bisogna aprire il file di configurazione di VisiData e aggiungere il seguente codice: @Sheet . property def cursorRowIndex1 ( sheet ): return sheet . cursorRowIndex + 1 @Sheet . property def cursorVisibleColIndex1 ( sheet ): return sheet . cursorVisibleColIndex + 1 Sheet . class_options . disp_rstatus_fmt = ' R: {sheet.cursorRowIndex1} / {sheet.nRows} [ {sheet.nSelectedRows} ] C: {sheet.cursorVisibleColIndex1} / {sheet.nVisibleCols} {sheet.rowtype} ' Modificare i colori: l'esempio della barra di stato \u00b6 Questi i passi da seguire: aprire in modifica il file di configurazione; aggiungere l'opzione relativa che si vuole cambiare, con questa sintassi options.color_status = 'bold black on 255' ; salvare il file di configurazione. Attivare il comando clean-names \u00b6 I nomi dei campi dei file, per essere utilizzati in VisiData all'interno di espressioni Python non devono contenere spazi. Per avere disponibile un comando per \"pulire\" e normalizzare questi nomi, si pu\u00f2 aggiungere questo codice al file di configurazione: Sheet . addCommand ( '' , 'clean-names' , ''' options.clean_names = True; for c in visibleCols: c.name = c.name ''' ) Una volta aggiunto, per usarlo in VisiData: fare click sulla barra spaziatrice ; digitare clean-names e premere INVIO . Importare un modulo Python \u00b6 \u00c8 possibile importare in VisiData uno o pi\u00f9 moduli Python, in modo che sia disponibili ulteriori funzionalit\u00e0. Per farlo c'\u00e8 da aggiungere nel file di configurazione la \"classica\" stringa di import . Ad esempio per abilitare il modulo re , baster\u00e0 aggiungere: import re Un file di configurazione di esempio \u00b6 # Python modules to import import re # to set the value to use for null value cells options . null_value = \"\" #options.disp_float_fmt = '%.07f' # to have rows and columns info bottom right @Sheet . property def cursorRowIndex1 ( sheet ): return sheet . cursorRowIndex + 1 @Sheet . property def cursorVisibleColIndex1 ( sheet ): return sheet . cursorVisibleColIndex + 1 Sheet . class_options . disp_rstatus_fmt = ' R: {sheet.cursorRowIndex1} / {sheet.nRows} [ {sheet.nSelectedRows} ] C: {sheet.cursorVisibleColIndex1} / {sheet.nVisibleCols} {sheet.rowtype} ' # to have the function that write today date today = datetime . datetime . today () # to set the color of the status bar options . color_status = 'bold black on 255' # to add a command to clean field names, not usable in python expressions Sheet . addCommand ( '' , 'clean-names' , ''' options.clean_names = True; for c in visibleCols: c.name = c.name ''' )","title":"Configurazione"},{"location":"configurazione/#configurazione","text":"In VisiData \u00e8 possibile utilizzare un file di configurazione, per personalizzare alcune caratteristiche: i colori dell'applicazione, le funzioni disponibili, l'interfaccia, ecc.. Questo file di default si chiama .visidatarc e VisiData lo cerca nella cartella home dell'utente, quindi ~/.visidatarc . Se non \u00e8 presente, \u00e8 da creare e da riempire con le istruzioni di configurazione che si desiderano.","title":"Configurazione"},{"location":"configurazione/#esempi","text":"","title":"Esempi."},{"location":"configurazione/#attivare-contatore-di-righe-e-colonne","text":"\u00c8 molto comodo, ma non \u00e8 disponibile by default , poter aver nell'interfaccia di VisiData un'indicazione con (vedi figura sotto): riga corrente; righe totali; numero di righe selezionate; colonna corrente; colonne totali. Per attivare la cosa bisogna aprire il file di configurazione di VisiData e aggiungere il seguente codice: @Sheet . property def cursorRowIndex1 ( sheet ): return sheet . cursorRowIndex + 1 @Sheet . property def cursorVisibleColIndex1 ( sheet ): return sheet . cursorVisibleColIndex + 1 Sheet . class_options . disp_rstatus_fmt = ' R: {sheet.cursorRowIndex1} / {sheet.nRows} [ {sheet.nSelectedRows} ] C: {sheet.cursorVisibleColIndex1} / {sheet.nVisibleCols} {sheet.rowtype} '","title":"Attivare contatore di righe e colonne"},{"location":"configurazione/#modificare-i-colori-lesempio-della-barra-di-stato","text":"Questi i passi da seguire: aprire in modifica il file di configurazione; aggiungere l'opzione relativa che si vuole cambiare, con questa sintassi options.color_status = 'bold black on 255' ; salvare il file di configurazione.","title":"Modificare i colori: l'esempio della barra di stato"},{"location":"configurazione/#attivare-il-comando-clean-names","text":"I nomi dei campi dei file, per essere utilizzati in VisiData all'interno di espressioni Python non devono contenere spazi. Per avere disponibile un comando per \"pulire\" e normalizzare questi nomi, si pu\u00f2 aggiungere questo codice al file di configurazione: Sheet . addCommand ( '' , 'clean-names' , ''' options.clean_names = True; for c in visibleCols: c.name = c.name ''' ) Una volta aggiunto, per usarlo in VisiData: fare click sulla barra spaziatrice ; digitare clean-names e premere INVIO .","title":"Attivare il comando clean-names"},{"location":"configurazione/#importare-un-modulo-python","text":"\u00c8 possibile importare in VisiData uno o pi\u00f9 moduli Python, in modo che sia disponibili ulteriori funzionalit\u00e0. Per farlo c'\u00e8 da aggiungere nel file di configurazione la \"classica\" stringa di import . Ad esempio per abilitare il modulo re , baster\u00e0 aggiungere: import re","title":"Importare un modulo Python"},{"location":"configurazione/#un-file-di-configurazione-di-esempio","text":"# Python modules to import import re # to set the value to use for null value cells options . null_value = \"\" #options.disp_float_fmt = '%.07f' # to have rows and columns info bottom right @Sheet . property def cursorRowIndex1 ( sheet ): return sheet . cursorRowIndex + 1 @Sheet . property def cursorVisibleColIndex1 ( sheet ): return sheet . cursorVisibleColIndex + 1 Sheet . class_options . disp_rstatus_fmt = ' R: {sheet.cursorRowIndex1} / {sheet.nRows} [ {sheet.nSelectedRows} ] C: {sheet.cursorVisibleColIndex1} / {sheet.nVisibleCols} {sheet.rowtype} ' # to have the function that write today date today = datetime . datetime . today () # to set the color of the status bar options . color_status = 'bold black on 255' # to add a command to clean field names, not usable in python expressions Sheet . addCommand ( '' , 'clean-names' , ''' options.clean_names = True; for c in visibleCols: c.name = c.name ''' )","title":"Un file di configurazione di esempio"},{"location":"dieciModi/","text":"10 Modi di usare Visidata \u00b6 Dieci esempi rapidi , che mostrano cosa \u00e8 possibile fare con VisiData. \u00c8 una sezione a cura di Salvatore Fiandaca (grazie), basata sul lavoro di Saul Pwanson , l'autore di VisiData. 1. esplora i set di dati senza sforzo, indipendentemente dal formato \u00b6 $ vd albums.json dropbox/*.xls* agents.sqlite Utilizzare i tasti freccia (\u2191\u2193\u2192\u2190) per spostarsi e q per uscire. VisiData carica i dati da molte fonti e formati diversi , incluso tutto ci\u00f2 che i pandas possono caricare! I nuovi caricatori sono inclusi in ogni versione e puoi crearne uno tu stesso facilmente. 2. convertire da qualsiasi formato di input in qualsiasi formato di output \u00b6 All'interno di VisiData , premere Ctrl+S per salvare il file nel formato specificato dall'estensione. Converti direttamente dalla riga di comando con: $ vd -b input.csv -o output.json 3. come sostituto interattivo di grep, awk, sed, cut, sort, uniq \u00b6 $ netstat -an | vd -f fixed -o used-ports.txt Premi Ctrl+Q per uscire da VisiData e salvare nel file di output specificato. 4. grattare i dati della tabella HTML da una pagina Web: \u00b6 $ vd https://en.wikipedia.org/wiki/List_of_largest_cities 5. vedere una differenza visiva di due fogli con la stessa struttura \u00b6 $ vd --diff foo1.csv foo2.csv 6. esplora un oggetto dal Python REPL \u00b6 >>> visidata.view(obj) 7. esplora tutti i pandas DataFrame \u00b6 >>> visidata.view_pandas(df) 8. creare una pipeline di dati ad hoc \u00b6 VisiData pu\u00f2 anche essere utilizzato in modalit\u00e0 batch con script senza richiedere alcuna interazione. Salvare il cmdlog in un file .vd con Ctrl+D foo.vd , quindi riprodurre il file .vd salvato: $ vd -b -p foo.vd 9. rinominare un mucchio di file \u00b6 Avviare vd nella directory con i file Modifica i nomi dei file ( documentazione sui comandi di modifica ) Ctrl+S per eseguire il commit ( guarda questo video che mostra come utilizzare il browser di directory ) 10. vedi tutte le opzioni e i comandi disponibili \u00b6 Esistono molti altri modi per utilizzare VisiData! Per saperne di pi\u00f9, premi Ctrl H per vedere la manpage o z Ctrl+H per vedere l'elenco completo dei comandi disponibili sul foglio corrente.","title":"10 modi di usarlo"},{"location":"dieciModi/#10-modi-di-usare-visidata","text":"Dieci esempi rapidi , che mostrano cosa \u00e8 possibile fare con VisiData. \u00c8 una sezione a cura di Salvatore Fiandaca (grazie), basata sul lavoro di Saul Pwanson , l'autore di VisiData.","title":"10 Modi di usare Visidata"},{"location":"dieciModi/#1-esplora-i-set-di-dati-senza-sforzo-indipendentemente-dal-formato","text":"$ vd albums.json dropbox/*.xls* agents.sqlite Utilizzare i tasti freccia (\u2191\u2193\u2192\u2190) per spostarsi e q per uscire. VisiData carica i dati da molte fonti e formati diversi , incluso tutto ci\u00f2 che i pandas possono caricare! I nuovi caricatori sono inclusi in ogni versione e puoi crearne uno tu stesso facilmente.","title":"1. esplora i set di dati senza sforzo, indipendentemente dal formato"},{"location":"dieciModi/#2-convertire-da-qualsiasi-formato-di-input-in-qualsiasi-formato-di-output","text":"All'interno di VisiData , premere Ctrl+S per salvare il file nel formato specificato dall'estensione. Converti direttamente dalla riga di comando con: $ vd -b input.csv -o output.json","title":"2. convertire da qualsiasi formato di input in qualsiasi formato di output"},{"location":"dieciModi/#3-come-sostituto-interattivo-di-grep-awk-sed-cut-sort-uniq","text":"$ netstat -an | vd -f fixed -o used-ports.txt Premi Ctrl+Q per uscire da VisiData e salvare nel file di output specificato.","title":"3. come sostituto interattivo di grep, awk, sed, cut, sort, uniq"},{"location":"dieciModi/#4-grattare-i-dati-della-tabella-html-da-una-pagina-web","text":"$ vd https://en.wikipedia.org/wiki/List_of_largest_cities","title":"4. grattare i dati della tabella HTML da una pagina Web:"},{"location":"dieciModi/#5-vedere-una-differenza-visiva-di-due-fogli-con-la-stessa-struttura","text":"$ vd --diff foo1.csv foo2.csv","title":"5. vedere una differenza visiva di due fogli con la stessa struttura"},{"location":"dieciModi/#6-esplora-un-oggetto-dal-python-repl","text":">>> visidata.view(obj)","title":"6. esplora un oggetto dal Python REPL"},{"location":"dieciModi/#7-esplora-tutti-i-pandas-dataframe","text":">>> visidata.view_pandas(df)","title":"7. esplora tutti i pandas DataFrame"},{"location":"dieciModi/#8-creare-una-pipeline-di-dati-ad-hoc","text":"VisiData pu\u00f2 anche essere utilizzato in modalit\u00e0 batch con script senza richiedere alcuna interazione. Salvare il cmdlog in un file .vd con Ctrl+D foo.vd , quindi riprodurre il file .vd salvato: $ vd -b -p foo.vd","title":"8. creare una pipeline di dati ad hoc"},{"location":"dieciModi/#9-rinominare-un-mucchio-di-file","text":"Avviare vd nella directory con i file Modifica i nomi dei file ( documentazione sui comandi di modifica ) Ctrl+S per eseguire il commit ( guarda questo video che mostra come utilizzare il browser di directory )","title":"9. rinominare un mucchio di file"},{"location":"dieciModi/#10-vedi-tutte-le-opzioni-e-i-comandi-disponibili","text":"Esistono molti altri modi per utilizzare VisiData! Per saperne di pi\u00f9, premi Ctrl H per vedere la manpage o z Ctrl+H per vedere l'elenco completo dei comandi disponibili sul foglio corrente.","title":"10. vedi tutte le opzioni e i comandi disponibili"},{"location":"fogli/","text":"Fogli \u00b6 Introduzione \u00b6 In VisiData ci sono tre tipi di fogli: i fogli sorgente , con i dati che si \u00e8 scelto di aprire con VisiData; i fogli derivati , come quelli derivanti da filtraggio o la tabelle con le frequenze (vedi sotto); i metafogli , che descrivono e definiscono i dataset caricati (come quello che descrive ad esempio le colonne di una tabella, o il \"foglio dei fogli\"). Il foglio/tabella correntemente aperto si chiude con q . Fare JOIN tra tabelle \u00b6 Se ad esempio si volesse calcolare il rapporto tra numero di mezzi e popolazione, sarebbe utile fare un JOIN con una tabella con i dati della popolazione residente. I dati per provincia sono quelli di sotto e sono stati salvati in un file TSV denominato popolazioneAbruzzo.tsv (fonte ISTAT ). Provincia Popolazione L'AQUILA 300404 TERAMO 308284 PESCARA 319388 CHIETI 387120 Si pu\u00f2 fare in questo modo: si parte da vd parco_circolante_Abruzzo.csv ; si va sulla colonna provincia_residenza ; si calcola il foglio delle frequenze pigiando Shift+f e si ottiene si rinomina questo foglio frequenze premendo la barra spaziatrice, scrivendo il comando rename-sheet e dando poi Invio . E poi inserendo il nome nuovo (ad esempio mezziProvincia ); si apre la tabella con i dati sulla popolazione per provincia, pigiando o , scrivendo popolazioneAbruzzo.tsv (che \u00e8 il nome del file) e pigiando Invio (NOTA BENE si pu\u00f2 scrivere anche soltanto popo e poi pigiare TAB e il nome del file verr\u00e0 autocompletato). Si otterr\u00e0 si va nella colonna Provincia e si preme ! per impostarla come colonna chiave. Il JOIN in VisiData viene fatto tra colonne chiave; si apre il \"foglio dei fogli\" con Shift+s e si visualizzer\u00e0 qualcosa come; si va nella riga che contiene lo sheet popolazioneAbruzzo e si pigia INVIO ; si va di nuovo nella colonna Provincia e si preme ! per impostarla come colonna chiave; si apre il \"foglio dei fogli\" con Shift+s ; si selezionano con s le due tabelle mezziProvincia e popolazioneAbruzzo ; si pigia & che \u00e8 il comando di JOIN e in basso a sinistra ci viene chiesto quale tipo si vuole applicare ( nota bene : con VisiData >2.0 si deve premere CTRL + x e scegliere il tipo di JOIN ); si scrive inner e si pigia Invio e si ottiene una tabella che contiene sia il numero di mezzi per provincia, che il numero di abitanti. Da questa tabella a questo punto, semplificando un po', si potrebbe rapidamente calcolare il numero macchine per persona, in questo modo: si va nella colonna Popolazione e si preme # per impostarla come numero intero; si pigia = (per creare una nuova colonna con valori frutto di un'espressione); si scrive poi nel prompt count/Popolazione (c'\u00e8 l'autocompletamento con TAB dei nomi delle colonne); e si ottiene un risultato come quello di sotto. Concatenare tabelle \u00b6 La concatenazione tra due o pi\u00f9 tabelle con la stessa struttura si attiva tramite & . Ad esempio, a partire dai due file inputFileOne.csv e inputFileTwo.csv , presenti qui si procede in questo modo: si apre la shell e si va nella cartella che contiene i file da concatenare; si scrive vd e si preme Invio ; si seleziona la prima voce DirSheet for the current directory e si preme invio ; si selezionano con s i due file; si preme g Invio per aprirli entrambi; si apre il foglio dei fogli con Shift+s ; si selezionano inputFileOne.csv e inputFileTwo.csv con s ; si preme & per attivare la concatenazione; si preme Ctrl+X per il menu; si seleziona append e poi si preme Invio . Si avr\u00e0 a video l'unione dei due file di input (in questo video una replica di quanto descritto, per versioni vd < 2 ). Tabelle Pivot \u00b6 Ecco ad esempio come creare quella che da conto del numero di mezzi per marca, suddivisi per provincia: si va nella colonna marca e si imposta come colonna chiave, premendo ! ; si va poi nella colonna provincia_residenza e si pigia Shift+w ; si ottiene la tabella pivot desiderata. Se invece del conteggio delle occorrenze si volesse (a partire da un altro campo) calcolare un altro dato aggregato - come ad esempio l'et\u00e0 media per marca e provincia - si pu\u00f2 procedere in questo modo: si va nella colonna eta_intestatario e si imposta a numero intero, pigiando su # ; si preme + , poi in basso a sinistra nel prompt si scrive avg e infine si d\u00e0 Invio ; si va di nuovo nella colonna provincia_residenza e si pigia Shift+w . In output, per ogni provincia, si avr\u00e0 quindi la media desiderata. Metafogli \u00b6 Foglio di riepilogo globale \u00b6 Per avere una visione a \"volo d'uccello\" sull'intera tabella esiste il comando Shift+i , che restituisce un riepilogo statistico per tutte le colonne. Se prima di lanciarlo si definiscono correttamente i campi (ad esempio i numerici, come numerici), verranno eseguiti correttamente anche i calcoli per min , max , median , mean , stdev . Questa \u00e8 un'altra feature di grande comodit\u00e0 (presente in molte applicazione e ambienti per analisi dati), che verr\u00e0 usata molto da chi lavorer\u00e0 con VisiData. Foglio dei fogli \u00b6 Il \"foglio dei fogli\" si apre con Shift + s e fornisce l'elenco (e alcune informazioni correlate) di tutti i fogli aperti. Selezionandone uno e pigiando Invio , quest'ultimo si aprir\u00e0. Per rinominarne uno dal \"foglio dei fogli\", basta selezionarlo, premere e e inserire il nuovo nome e poi dare Invio . O in alternativa, se si \u00e8 davanti al foglio che si vuole rinominare, premere la barra spaziatrice , scrivere rename-sheet , digitare il nuovo nome e infine pigiare su Invio . Fogli derivati \u00b6 Foglio delle frequenze \u00b6 Uno dei modi per avere un riepilogo \u00e8 usare il foglio delle frequenze. A partire da una colonna (o dalla combinazione di pi\u00f9 d'una) \u00e8 possibile - con Shift+f - aprire un foglio derivato, che contiene dei dati relativi al conteggio per valori distinti di quanto contenuto in quella colonna. Se per esempio a partire dal Parco Circolante dei veicoli dell'Abruzzo, si volesse avere un'idea sulla distribuzione per \"marca\", basta navigare in vista tabella sino a quella colonna e poi pigiare Shift+f e avere qualcosa come quella di sotto. I dati sono ordinati per conteggio ed emerge subito come una famosa marca nazionale da sola faccia \u00bc del campione. Cos\u00ec come emerge che c'\u00e8 un 5% di elementi in cui la marca non \u00e8 definita e anche questa \u00e8 un'informazione che ci potrebbe consentire da subito di prendere delle decisioni. Molto comoda anche la colonna histogram che da visivamente in modo molto diretto un'idea del rapporto tra i numeri descritti in tabella. \u00c8 possibile generare un foglio delle frequenze anche basato su pi\u00f9 colonne. Per farlo si impostano come colonne chiave ( qui come fare) quelle che si vogliono trasformare in \"foglio delle frequenze\", e poi si pigia g+Shift+f . Qui sotto ad esempio un riepilogo per le coppie univoche di destinazione/alimentazione . I fogli di frequenza, oltre al conteggio per valori distinti, possono contenere altri calcoli. Gli \"aggregatori\" possibili sono min , max , avg / mean , median , q3/q4/q5/q10 (terzili/quartili/quintili/decili), sum , distinct , count e keymax . Ad esempio per ogni provincia si pu\u00f2 avere restituito la distribuzione di et\u00e0 per quartile e scoprire che il 50% del campione \u00e8 compreso nella fascia di et\u00e0 tra i 18 e circa i 55 anni. Per aggiungere l'aggregatore q4 al foglio delle frequenze, bisogna seguire questi passi: navigare sino alla colonna eta_intestatario e impostarla a numero intero con # ; premere + e scrivere (in basso a sinistra) q4 (per il calcolo dei quartili, quindi al 25, 50 e 75 percento); navigare sino alla colonna provincia_residenza e pigiare Shift+f . Inizier\u00e0 da subito il calcolo (che non \u00e8 immediato, sono pi\u00f9 di un milione di righe) e alla fine si avr\u00e0 qualcosa come l'immagine di sopra (non \u00e8 fico VisiData?). Salvare un foglio \u00b6 Per salvare un foglio si preme CTRL+s , poi si scrive il nome del file con estensione ( nomeEsempio.csv ) e infine si pigia Invio .","title":"Fogli"},{"location":"fogli/#fogli","text":"","title":"Fogli"},{"location":"fogli/#introduzione","text":"In VisiData ci sono tre tipi di fogli: i fogli sorgente , con i dati che si \u00e8 scelto di aprire con VisiData; i fogli derivati , come quelli derivanti da filtraggio o la tabelle con le frequenze (vedi sotto); i metafogli , che descrivono e definiscono i dataset caricati (come quello che descrive ad esempio le colonne di una tabella, o il \"foglio dei fogli\"). Il foglio/tabella correntemente aperto si chiude con q .","title":"Introduzione"},{"location":"fogli/#fare-join-tra-tabelle","text":"Se ad esempio si volesse calcolare il rapporto tra numero di mezzi e popolazione, sarebbe utile fare un JOIN con una tabella con i dati della popolazione residente. I dati per provincia sono quelli di sotto e sono stati salvati in un file TSV denominato popolazioneAbruzzo.tsv (fonte ISTAT ). Provincia Popolazione L'AQUILA 300404 TERAMO 308284 PESCARA 319388 CHIETI 387120 Si pu\u00f2 fare in questo modo: si parte da vd parco_circolante_Abruzzo.csv ; si va sulla colonna provincia_residenza ; si calcola il foglio delle frequenze pigiando Shift+f e si ottiene si rinomina questo foglio frequenze premendo la barra spaziatrice, scrivendo il comando rename-sheet e dando poi Invio . E poi inserendo il nome nuovo (ad esempio mezziProvincia ); si apre la tabella con i dati sulla popolazione per provincia, pigiando o , scrivendo popolazioneAbruzzo.tsv (che \u00e8 il nome del file) e pigiando Invio (NOTA BENE si pu\u00f2 scrivere anche soltanto popo e poi pigiare TAB e il nome del file verr\u00e0 autocompletato). Si otterr\u00e0 si va nella colonna Provincia e si preme ! per impostarla come colonna chiave. Il JOIN in VisiData viene fatto tra colonne chiave; si apre il \"foglio dei fogli\" con Shift+s e si visualizzer\u00e0 qualcosa come; si va nella riga che contiene lo sheet popolazioneAbruzzo e si pigia INVIO ; si va di nuovo nella colonna Provincia e si preme ! per impostarla come colonna chiave; si apre il \"foglio dei fogli\" con Shift+s ; si selezionano con s le due tabelle mezziProvincia e popolazioneAbruzzo ; si pigia & che \u00e8 il comando di JOIN e in basso a sinistra ci viene chiesto quale tipo si vuole applicare ( nota bene : con VisiData >2.0 si deve premere CTRL + x e scegliere il tipo di JOIN ); si scrive inner e si pigia Invio e si ottiene una tabella che contiene sia il numero di mezzi per provincia, che il numero di abitanti. Da questa tabella a questo punto, semplificando un po', si potrebbe rapidamente calcolare il numero macchine per persona, in questo modo: si va nella colonna Popolazione e si preme # per impostarla come numero intero; si pigia = (per creare una nuova colonna con valori frutto di un'espressione); si scrive poi nel prompt count/Popolazione (c'\u00e8 l'autocompletamento con TAB dei nomi delle colonne); e si ottiene un risultato come quello di sotto.","title":"Fare JOIN tra tabelle"},{"location":"fogli/#concatenare-tabelle","text":"La concatenazione tra due o pi\u00f9 tabelle con la stessa struttura si attiva tramite & . Ad esempio, a partire dai due file inputFileOne.csv e inputFileTwo.csv , presenti qui si procede in questo modo: si apre la shell e si va nella cartella che contiene i file da concatenare; si scrive vd e si preme Invio ; si seleziona la prima voce DirSheet for the current directory e si preme invio ; si selezionano con s i due file; si preme g Invio per aprirli entrambi; si apre il foglio dei fogli con Shift+s ; si selezionano inputFileOne.csv e inputFileTwo.csv con s ; si preme & per attivare la concatenazione; si preme Ctrl+X per il menu; si seleziona append e poi si preme Invio . Si avr\u00e0 a video l'unione dei due file di input (in questo video una replica di quanto descritto, per versioni vd < 2 ).","title":"Concatenare tabelle"},{"location":"fogli/#tabelle-pivot","text":"Ecco ad esempio come creare quella che da conto del numero di mezzi per marca, suddivisi per provincia: si va nella colonna marca e si imposta come colonna chiave, premendo ! ; si va poi nella colonna provincia_residenza e si pigia Shift+w ; si ottiene la tabella pivot desiderata. Se invece del conteggio delle occorrenze si volesse (a partire da un altro campo) calcolare un altro dato aggregato - come ad esempio l'et\u00e0 media per marca e provincia - si pu\u00f2 procedere in questo modo: si va nella colonna eta_intestatario e si imposta a numero intero, pigiando su # ; si preme + , poi in basso a sinistra nel prompt si scrive avg e infine si d\u00e0 Invio ; si va di nuovo nella colonna provincia_residenza e si pigia Shift+w . In output, per ogni provincia, si avr\u00e0 quindi la media desiderata.","title":"Tabelle Pivot"},{"location":"fogli/#metafogli","text":"","title":"Metafogli"},{"location":"fogli/#foglio-di-riepilogo-globale","text":"Per avere una visione a \"volo d'uccello\" sull'intera tabella esiste il comando Shift+i , che restituisce un riepilogo statistico per tutte le colonne. Se prima di lanciarlo si definiscono correttamente i campi (ad esempio i numerici, come numerici), verranno eseguiti correttamente anche i calcoli per min , max , median , mean , stdev . Questa \u00e8 un'altra feature di grande comodit\u00e0 (presente in molte applicazione e ambienti per analisi dati), che verr\u00e0 usata molto da chi lavorer\u00e0 con VisiData.","title":"Foglio di riepilogo globale"},{"location":"fogli/#foglio-dei-fogli","text":"Il \"foglio dei fogli\" si apre con Shift + s e fornisce l'elenco (e alcune informazioni correlate) di tutti i fogli aperti. Selezionandone uno e pigiando Invio , quest'ultimo si aprir\u00e0. Per rinominarne uno dal \"foglio dei fogli\", basta selezionarlo, premere e e inserire il nuovo nome e poi dare Invio . O in alternativa, se si \u00e8 davanti al foglio che si vuole rinominare, premere la barra spaziatrice , scrivere rename-sheet , digitare il nuovo nome e infine pigiare su Invio .","title":"Foglio dei fogli"},{"location":"fogli/#fogli-derivati","text":"","title":"Fogli derivati"},{"location":"fogli/#foglio-delle-frequenze","text":"Uno dei modi per avere un riepilogo \u00e8 usare il foglio delle frequenze. A partire da una colonna (o dalla combinazione di pi\u00f9 d'una) \u00e8 possibile - con Shift+f - aprire un foglio derivato, che contiene dei dati relativi al conteggio per valori distinti di quanto contenuto in quella colonna. Se per esempio a partire dal Parco Circolante dei veicoli dell'Abruzzo, si volesse avere un'idea sulla distribuzione per \"marca\", basta navigare in vista tabella sino a quella colonna e poi pigiare Shift+f e avere qualcosa come quella di sotto. I dati sono ordinati per conteggio ed emerge subito come una famosa marca nazionale da sola faccia \u00bc del campione. Cos\u00ec come emerge che c'\u00e8 un 5% di elementi in cui la marca non \u00e8 definita e anche questa \u00e8 un'informazione che ci potrebbe consentire da subito di prendere delle decisioni. Molto comoda anche la colonna histogram che da visivamente in modo molto diretto un'idea del rapporto tra i numeri descritti in tabella. \u00c8 possibile generare un foglio delle frequenze anche basato su pi\u00f9 colonne. Per farlo si impostano come colonne chiave ( qui come fare) quelle che si vogliono trasformare in \"foglio delle frequenze\", e poi si pigia g+Shift+f . Qui sotto ad esempio un riepilogo per le coppie univoche di destinazione/alimentazione . I fogli di frequenza, oltre al conteggio per valori distinti, possono contenere altri calcoli. Gli \"aggregatori\" possibili sono min , max , avg / mean , median , q3/q4/q5/q10 (terzili/quartili/quintili/decili), sum , distinct , count e keymax . Ad esempio per ogni provincia si pu\u00f2 avere restituito la distribuzione di et\u00e0 per quartile e scoprire che il 50% del campione \u00e8 compreso nella fascia di et\u00e0 tra i 18 e circa i 55 anni. Per aggiungere l'aggregatore q4 al foglio delle frequenze, bisogna seguire questi passi: navigare sino alla colonna eta_intestatario e impostarla a numero intero con # ; premere + e scrivere (in basso a sinistra) q4 (per il calcolo dei quartili, quindi al 25, 50 e 75 percento); navigare sino alla colonna provincia_residenza e pigiare Shift+f . Inizier\u00e0 da subito il calcolo (che non \u00e8 immediato, sono pi\u00f9 di un milione di righe) e alla fine si avr\u00e0 qualcosa come l'immagine di sopra (non \u00e8 fico VisiData?).","title":"Foglio delle frequenze"},{"location":"fogli/#salvare-un-foglio","text":"Per salvare un foglio si preme CTRL+s , poi si scrive il nome del file con estensione ( nomeEsempio.csv ) e infine si pigia Invio .","title":"Salvare un foglio"},{"location":"formati/","text":"Formati \u00b6 filetype format VisiData_loader VisiData saver version_added created creator PyPI dependencies csv Comma-Separated Values 0.28 displayed text 0.28 1972 json Javascript Object Notation (JSON) 0.28 typed 0.28 2001 Douglas Crockford tsv Tab-Separated Values 0.28 displayed text 0.28 xlsx Excel spreadsheets 0.28 0.28 1987 Microsoft openpyxl zip ZIP archive format 0.28 0.28 1989 PKWARE hdf5 Hierarchical Data Format 0.28 0.28 199x NCSA h5py sqlite sqlite 0.42 0.42 2000 D. Richard Hipp xls Excel spreadsheets 0.42 0.42 1987 Microsoft xlrd fixed fixed width text 0.97 0.97 postgres PostgreSQL database 0.97 0.97 1996 vd VisiData command log 0.97 0.97 2017 VisiData vds VisiData Sheet 2.2 yes 2021 VisiData mbtiles MapBox Tileset 0.98 0.98 2011 MapBox mapbox-vector-tile pbf Protocolbuffer Binary Format 0.98 0.98 2011 OpenStreetMap shp Shapefile geographic data 0.98 0.98 1993 ESRI pyshp html HTML tables 0.99 displayed text 0.99 1996 Dave Raggett lxml md markdown table displayed text 1.1 2008 png Portable Network Graphics (PNG) image 1.1 from png 1.1 1996 PNG Development Group pypng ttf TrueType Font 1.1 1.1 1991 Apple fonttools dot Graphviz diagram from pcap 1.2 1991 dta Stata 1.2 1.2 1985 StataCorp pandas geojson Geographic JSON 2.2 yes (from shp and geojson) 2008 http://geojson.org/ sas7bdat Statistical Analysis System (SAS) 1.2 1.2 1976 SAS Institute sas7bdat sav SPSS statistics 1.2 1.2 1968 SPSS Inc spss SPSS statistics 1.2 1.2 1968 SPSS Inc savReaderWriter xpt Statistical Analysis System (SAS) 1.2 1.2 1976 SAS Institute xport jsonl JSON Lines 1.3 typed 1.3 2013 Ian Ward pandas all formats supported by pandas library 1.3 1.3 2008 Wes McKinney pandas pcap network packet capture 1.3 1.3 1988 LBNL dpkt dnslib pyprof Python Profile data 1.3 1.3 xml eXtensible Markup Language (XML) 1.3 from xml 1.3 1998 W3C lxml yaml YAML Ain't Markup Language (YAML) 1.3 1.3 2001 Clark Evans PyYAML frictionless Frictionless Data 2.0 2.0 OpenKnowledge Institute datapackage jira JIRA/Confluence table markup displayed text 2.0 Atlassian npy NumPy array format 2.0 typed 2.0 numpy tar Unix Tape Archive 2.0 2.0 usv Unicode-Separated Value 2.0 displayed text 2.0 1993 Unicode xlsb Excel binary format 2.0 2.0 Microsoft xlrd mysql MySQL 2.0 1995 MySQL AB https://github.com/mysql/mysql-server pdf Portable Document Format 2.0 1993 Adobe https://en.wikipedia.org/wiki/PDF vcf Virtual Contact File (vCard) 2.0 1995 Versit Consortium https://tools.ietf.org/html/rfc6350 rec recutils database file 2.0 displayed text 2010 Jose E. Marchesi https://www.gnu.org/software/recutils/ eml Multipurpose Internet Mail Extensions (MIME) 2.0 1996 Nathaniel Borenstein and Ned Freed https://tools.ietf.org/html/rfc2045","title":"Formati"},{"location":"formati/#formati","text":"filetype format VisiData_loader VisiData saver version_added created creator PyPI dependencies csv Comma-Separated Values 0.28 displayed text 0.28 1972 json Javascript Object Notation (JSON) 0.28 typed 0.28 2001 Douglas Crockford tsv Tab-Separated Values 0.28 displayed text 0.28 xlsx Excel spreadsheets 0.28 0.28 1987 Microsoft openpyxl zip ZIP archive format 0.28 0.28 1989 PKWARE hdf5 Hierarchical Data Format 0.28 0.28 199x NCSA h5py sqlite sqlite 0.42 0.42 2000 D. Richard Hipp xls Excel spreadsheets 0.42 0.42 1987 Microsoft xlrd fixed fixed width text 0.97 0.97 postgres PostgreSQL database 0.97 0.97 1996 vd VisiData command log 0.97 0.97 2017 VisiData vds VisiData Sheet 2.2 yes 2021 VisiData mbtiles MapBox Tileset 0.98 0.98 2011 MapBox mapbox-vector-tile pbf Protocolbuffer Binary Format 0.98 0.98 2011 OpenStreetMap shp Shapefile geographic data 0.98 0.98 1993 ESRI pyshp html HTML tables 0.99 displayed text 0.99 1996 Dave Raggett lxml md markdown table displayed text 1.1 2008 png Portable Network Graphics (PNG) image 1.1 from png 1.1 1996 PNG Development Group pypng ttf TrueType Font 1.1 1.1 1991 Apple fonttools dot Graphviz diagram from pcap 1.2 1991 dta Stata 1.2 1.2 1985 StataCorp pandas geojson Geographic JSON 2.2 yes (from shp and geojson) 2008 http://geojson.org/ sas7bdat Statistical Analysis System (SAS) 1.2 1.2 1976 SAS Institute sas7bdat sav SPSS statistics 1.2 1.2 1968 SPSS Inc spss SPSS statistics 1.2 1.2 1968 SPSS Inc savReaderWriter xpt Statistical Analysis System (SAS) 1.2 1.2 1976 SAS Institute xport jsonl JSON Lines 1.3 typed 1.3 2013 Ian Ward pandas all formats supported by pandas library 1.3 1.3 2008 Wes McKinney pandas pcap network packet capture 1.3 1.3 1988 LBNL dpkt dnslib pyprof Python Profile data 1.3 1.3 xml eXtensible Markup Language (XML) 1.3 from xml 1.3 1998 W3C lxml yaml YAML Ain't Markup Language (YAML) 1.3 1.3 2001 Clark Evans PyYAML frictionless Frictionless Data 2.0 2.0 OpenKnowledge Institute datapackage jira JIRA/Confluence table markup displayed text 2.0 Atlassian npy NumPy array format 2.0 typed 2.0 numpy tar Unix Tape Archive 2.0 2.0 usv Unicode-Separated Value 2.0 displayed text 2.0 1993 Unicode xlsb Excel binary format 2.0 2.0 Microsoft xlrd mysql MySQL 2.0 1995 MySQL AB https://github.com/mysql/mysql-server pdf Portable Document Format 2.0 1993 Adobe https://en.wikipedia.org/wiki/PDF vcf Virtual Contact File (vCard) 2.0 1995 Versit Consortium https://tools.ietf.org/html/rfc6350 rec recutils database file 2.0 displayed text 2010 Jose E. Marchesi https://www.gnu.org/software/recutils/ eml Multipurpose Internet Mail Extensions (MIME) 2.0 1996 Nathaniel Borenstein and Ned Freed https://tools.ietf.org/html/rfc2045","title":"Formati"},{"location":"installazione/","text":"Per gli sviluppatori, per chi usa la riga di comando, \u00e8 molto facile . \u00c8 scritto in Python 3 e di base basta usare l'installer di Python: pip3 install visidata Il requisito \u00e8 avere installato Python 3 ; in ambiente Windows l'uso ottimale si realizza tramite Windows Subsystem for Linux . Se si vuole installare la versione di sviluppo, il comando \u00e8: pip3 install --upgrade --no-warn-script-location git+https://github.com/saulpw/visidata.git@develop","title":"Installazione"},{"location":"lavorareCelle/","text":"Lavorare sulle celle \u00b6 Fare un trova e sostituisci globale \u00b6 Si parte dal selezionare le righe su cui si vuole eseguire l'operazione (se sono tutte il comando \u00e8 gs ). Digitare gz* e poi scrivere stringa da trovare / stringa da sostituire e dare INVIO . Se ad esempio volessi sostituire la stringa pal con mis , dovrei scrivere pal/mis . \u00c8 possibile usare anche le espressioni regolari.","title":"sulle celle"},{"location":"lavorareCelle/#lavorare-sulle-celle","text":"","title":"Lavorare sulle celle"},{"location":"lavorareCelle/#fare-un-trova-e-sostituisci-globale","text":"Si parte dal selezionare le righe su cui si vuole eseguire l'operazione (se sono tutte il comando \u00e8 gs ). Digitare gz* e poi scrivere stringa da trovare / stringa da sostituire e dare INVIO . Se ad esempio volessi sostituire la stringa pal con mis , dovrei scrivere pal/mis . \u00c8 possibile usare anche le espressioni regolari.","title":"Fare un trova e sostituisci globale"},{"location":"lavorareColonne/","text":"Lavorare sulle colonne \u00b6 Ogni colonna in VisiData ha 3 attributi principali: Name , il nome della colonna; Width , la larghezza a schermo della colonna (se impostata a 0, la colonna diventa invisibile); Type , per definire se contiene testi, numeri interi, numeri decimali, monete o date. Il foglio delle colonne \u00b6 In VisiData esistono i cosiddetti meta-fogli (vedi sopra ): uno di questi \u00e8 il foglio delle colonne, che elenca tutte le colonne e i relativi attributi di una tabella. A partire dalla visualizzazione di una tabella, si apre con Shift+c . \u00c8 una delle caratteristiche di VisiData che consente una rapida prima lettura del dato, che personalmente uso anche ad esempio per costruire brevi relazioni che contengono schema dati. Impostare il tipo di campo \u00b6 Come impostazione predefinita VisiData imposta a \"testo\" la tipologia di tutti i campi (che \u00e8 quello che faccio di solito anche io alla prima apertura sia in un foglio elettronico che in Pandas). Per definire il tipo di campo di una colonna della tabella che si sta visualizzando (cosa che consente di fare correttamente ad esempio operazioni di ordinamento, matematiche, ecc.), si deve navigare sino alla colonna su cui si vuole intervenire e poi pigiare: # , per definire un campo con numeri interi (0, -1, 5000000) % , per definire un campo con numeri decimali (0.5, -3.14, 23.45557) $ , per definire un campo con monete ($4.99, \u20ac20) @ , per definire un campo con date (2018-04-06, April 6, 2018, 04/06/2018) ~ , per definire un campo di testo (qualsiasi cosa!) Impostare numero di decimali in un campo floating \u00b6 Di default i campi floating sono renderizzati con due decimali (la formattazione \u00e8 impostata come %.02f ). Per modificare la cosa si pu\u00f2 aprire il foglio delle colonne ( SHIFT+c ) e modificare il valore di formattazione delle colonna fmtstr (vedi sotto). Per passare a tre decimali per un campo, baster\u00e0 ad esempio modificare la cella della colonna di interesse da %.02f a %.03f (in edit di cella si va con il tasto e ). Se si vuole fare su pi\u00f9 colonne: si apre sempre il foglio delle colonne; si selezionano le colonne di cui si vuole cambiare la formattazione; si va sulla colonna fmtstr ; si va in modifica globale con ge e si inserisce il valore di formattazione desiderato; si preme INVIO per applicare la modifica. Impostare formato data personalizzato \u00b6 Se una cella contiene ad esempio la data 06/11/2020 (qui come 6 novembre 2020), e imposto la colonna come data con il tasto @ , visidata la interpreta come 2020-06-11 , ovvero come 11 giugno. Per impostarla correttamente bisogna impostare un formato data personalizzato: si va sulla colonna con le date; si digita z@ e si preme INVIO ; si imposta il formato - in questo caso %d/%m/%Y - e si preme INVIO . In output si avr\u00e0 2020-11-06 . Rinominare le colonne \u00b6 Per farlo si naviga sino alla colonna che si vuole rinominare e poi: si pigia ^ ; si digita il nome che si vuole assegnare; si pigia Invio . Rinominare le colonne in blocco \u00b6 Pu\u00f2 essere utile ad esempio anteporre dei caratteri a tutte le colonne che iniziano per t . Questi i passi: si apre il foglio colonne con shift + c ; si va nella colonna con il nome delle colonne (\u00e8 la prima); si digita | , si scrive ^t e si pigia INVIO (saranno selezionate tutte le colonne che iniziano con il carattere t ); si pigia g* , per attivare il trova e sostituisci via regex ; si scrive ^(t.+)/TR_\\1 e poi INVIO . Tutte le colonne che iniziano per t , avranno un nuovo nome corrispondente al precedente, con TR_ come prefisso. La colonna tabacco , diventerebbe ad esempio TR_tabacco . Come espandere, ridurre e rimuovere colonne \u00b6 Questi gli shortcut: _ , per espandere la larghezza della colonna corrente, alla larghezza massima del testo contenuto nella stessa, tenendo conto delle righe visualizzate a schermo; g_ , per espandere la larghezza di tutte le colonne, alla larghezza massima del testo contenuto, tenendo conto delle righe visualizzate a schermo; z_ + n , per impostare la larghezza della colonna corrente a n caratteri; - , per nascondere la colonna corrente (viene impostata a 0 la sua larghezza); gv , per scoprire tutte le colonne nascoste; z- , per ridurre la larghezza della colonna corrente alla sua met\u00e0. Spostare una colonna \u00b6 Ecco come farlo: Shift+h , sposta la colonna corrente di una posizione a sinistra; Shift+l , sposta la colonna corrente di una posizione a destra. Modificare una colonna tramite un'espressione Python \u00b6 A questa tabella si vuole assegnare al campo FieldA il valore di FieldB , tutte le volte che FieldA \u00e8 vuoto. FieldA FieldB 1 3 1 12 Questa la procedura: gs per selezionare tutte le righe; g= per scrivere l'espressione Python; aggiungere come espressione FieldB if FieldA==\"\" else FieldA . Ovvero ( FieldA ) \u00e8 uguale FieldB se FieldA non contiene nulla, altrimenti \u00e8 uguale a se stesso (rimane invariato). Calcoli per colonna \u00b6 \u00c8 possibile avere restituito, per una colonna, il risultato di uno dei calcoli di aggregazione disponibili: Ad esempio per avere la somma dei valori di una colonna con numeri interi: si imposta il tipo di colonna a numero intero (con # ); si digita z+ e poi INVIO ; si digita sum e poi INVIO . In basso, si legger\u00e0 il valore risultante. Nota bene Se nessuna riga \u00e8 selezionata si avr\u00e0 il totale per colonna, altrimenti il calcolo sar\u00e0 applicato per colonna alle sole righe selezionate. Come definire una colonna chiave \u00b6 Per ogni foglio \u00e8 possibile definire una o pi\u00f9 colonne chiave. Hanno due funzioni principali: rimangono fissate sul lato sinistro, quando si naviga orizzontalmente sulla tabella; hanno una funzione speciale quando si fanno certe operazioni (come quelle di JOIN , per alcuni conteggi, ecc.). Per definire una colonna chiave (e vice-versa) si naviga sino alla colonna di interesse e si pigia ! . Manipolare le colonne dal foglio delle colonne \u00b6 Il foglio delle colonne oltre a dare una visione di insieme, consente di fare delle rapide modifiche in blocco. \u00c8 possibile spostare le colonne con Shift+j e Shift+k , rinominarle con e , impostare il tipo per tutte quelle selezionate, impostare la larghezza per tutte quelle selezionate. Ad esempio a partire dal Parco Circolante dei veicoli dell'Abruzzo, il foglio colonne ( Shift+c ) appare in questo modo. Se si vuole impostare a \"numero intero\" le colonne progressivo e eta_intestatario , bisogner\u00e0 prima selezionarle con s . Poi premere g# . Creare una nuova colonna \u00b6 Sono tre le modalit\u00e0 pi\u00f9 comode: come risultato di un'espressione Python; come risultato di un comando di split ; come risultato di estrazione di una porzione di testo da una colonna. Nuova colonna tramite espressione \u00b6 Ad esempio potrebbe essere utile creare una colonna vero/falso, per tutte le auto del Parco Circolante dei veicoli dell'Abruzzo, con cilindrata maggiore ai 643 (\u00e8 un numero a caso). Per farlo: navigare sino alla colonna cilindrata ; premere % per impostarla come numero decimale; pigiare su = ; nel prompt in basso a sinistra scrivere cilindrata > 643 ; premere Invio . In output qualcosa come quella di sotto, con la nuova colonna risultato di un'espressione Python. Nuove colonne come risultato di splitting \u00b6 Si possono creare nuove colonne, come risultato di una suddivisione di una gi\u00e0 esistente. Ad esempio nel campo data_immatricolazione \u00e8 contenuta sia la data che l'orario, separati da spazio (i.e. 1995-04-03 00:00:00 ). Se si vuole suddividerla in due colonne (data e orario), si pu\u00f2 procedere in questo modo: si naviga sino alla colonna data_immatricolazione ; si preme : ; si sceglie la stringa di testo (definibile anche come espressione regolare) da usare come separatore e si scrive in basso a sinistra nel prompt . In questo caso \u00e8 lo spazio; si digita quindi lo spazio e si d\u00e0 Invio . Come output si avr\u00e0 qualcosa come quella di sotto: due colonne frutto della divisione in pi\u00f9 colonne, sfruttando come separatore lo spazio. Nuove colonne come risultato di cattura e estrazione \u00b6 Per farlo ci vogliono delle conoscenze di base sulle espressioni regolari (che sono una conoscenza propedeutica per chiunque lavori con i dati). Se si vuole ad esempio estrarre l'anno dalla celle che contiene il valore 1995-04-03 00:00:00 , baster\u00e0 definire l'espressione regolare che estrae a partire dall'inizio della cella i primi 4 numeri. Che in termini di espressione regolare \u00e8 ^[0-9]{4} . Per creare una nuova colonna a partire dalla definizione di un'espressione regolare da usare come \"estrattore\", si procede in questo modo: si naviga sulla colonna data_immatricolazione ; si pigia ; ; si scrive nel prompt in basso a sinistra ^([0-9]{4}) . Sono state inserite le parentesi tonde, perch\u00e9 la cattura si fa a partire dalla definizione di un gruppo; si pigia Invio . E si ottiene qualcosa come quella di sotto: Trasformare una colonna tramite espressione regolare (trova e sostituisci) \u00b6 Su ogni colonna \u00e8 possibile fare delle trasformazioni basate su espressioni regolari. Se ad esempio si vogliono rimuovere dalle celle della colonna data_immatricolazione le informazioni sull'orario e passare quindi da 1995-04-03 00:00:00 a 1995-04-03 si pu\u00f2 procedere in questo modo: si selezionano le righe su cui si vuole fare questa trasformazione (se sono tutte il comando \u00e8 gs ); si va nella colonna data_immatricolazione ; si pigia su g* ; si scrive nel prompt .*$/ . Il simbolo / in VisiData separa ci\u00f2 che si cerca, da ci\u00f2 con cui si vuole sostituire. Qui si cerca uno spazio ( ), seguito da qualsiasi carattere sino a fine cella ( .*$ ), e si vuole sostituire con nulla; si pigia Invio (ci vorr\u00e0 un po' di tempo, sono pi\u00f9 di un milione di righe). Il risultato sar\u00e0 qualcosa come quella di sotto: Questo \u00e8 un \"trova e sostituisci\" per colonna.","title":"sulle colonne"},{"location":"lavorareColonne/#lavorare-sulle-colonne","text":"Ogni colonna in VisiData ha 3 attributi principali: Name , il nome della colonna; Width , la larghezza a schermo della colonna (se impostata a 0, la colonna diventa invisibile); Type , per definire se contiene testi, numeri interi, numeri decimali, monete o date.","title":"Lavorare sulle colonne"},{"location":"lavorareColonne/#il-foglio-delle-colonne","text":"In VisiData esistono i cosiddetti meta-fogli (vedi sopra ): uno di questi \u00e8 il foglio delle colonne, che elenca tutte le colonne e i relativi attributi di una tabella. A partire dalla visualizzazione di una tabella, si apre con Shift+c . \u00c8 una delle caratteristiche di VisiData che consente una rapida prima lettura del dato, che personalmente uso anche ad esempio per costruire brevi relazioni che contengono schema dati.","title":"Il foglio delle colonne"},{"location":"lavorareColonne/#impostare-il-tipo-di-campo","text":"Come impostazione predefinita VisiData imposta a \"testo\" la tipologia di tutti i campi (che \u00e8 quello che faccio di solito anche io alla prima apertura sia in un foglio elettronico che in Pandas). Per definire il tipo di campo di una colonna della tabella che si sta visualizzando (cosa che consente di fare correttamente ad esempio operazioni di ordinamento, matematiche, ecc.), si deve navigare sino alla colonna su cui si vuole intervenire e poi pigiare: # , per definire un campo con numeri interi (0, -1, 5000000) % , per definire un campo con numeri decimali (0.5, -3.14, 23.45557) $ , per definire un campo con monete ($4.99, \u20ac20) @ , per definire un campo con date (2018-04-06, April 6, 2018, 04/06/2018) ~ , per definire un campo di testo (qualsiasi cosa!)","title":"Impostare il tipo di campo"},{"location":"lavorareColonne/#impostare-numero-di-decimali-in-un-campo-floating","text":"Di default i campi floating sono renderizzati con due decimali (la formattazione \u00e8 impostata come %.02f ). Per modificare la cosa si pu\u00f2 aprire il foglio delle colonne ( SHIFT+c ) e modificare il valore di formattazione delle colonna fmtstr (vedi sotto). Per passare a tre decimali per un campo, baster\u00e0 ad esempio modificare la cella della colonna di interesse da %.02f a %.03f (in edit di cella si va con il tasto e ). Se si vuole fare su pi\u00f9 colonne: si apre sempre il foglio delle colonne; si selezionano le colonne di cui si vuole cambiare la formattazione; si va sulla colonna fmtstr ; si va in modifica globale con ge e si inserisce il valore di formattazione desiderato; si preme INVIO per applicare la modifica.","title":"Impostare numero di decimali in un campo floating"},{"location":"lavorareColonne/#impostare-formato-data-personalizzato","text":"Se una cella contiene ad esempio la data 06/11/2020 (qui come 6 novembre 2020), e imposto la colonna come data con il tasto @ , visidata la interpreta come 2020-06-11 , ovvero come 11 giugno. Per impostarla correttamente bisogna impostare un formato data personalizzato: si va sulla colonna con le date; si digita z@ e si preme INVIO ; si imposta il formato - in questo caso %d/%m/%Y - e si preme INVIO . In output si avr\u00e0 2020-11-06 .","title":"Impostare formato data personalizzato"},{"location":"lavorareColonne/#rinominare-le-colonne","text":"Per farlo si naviga sino alla colonna che si vuole rinominare e poi: si pigia ^ ; si digita il nome che si vuole assegnare; si pigia Invio .","title":"Rinominare le colonne"},{"location":"lavorareColonne/#rinominare-le-colonne-in-blocco","text":"Pu\u00f2 essere utile ad esempio anteporre dei caratteri a tutte le colonne che iniziano per t . Questi i passi: si apre il foglio colonne con shift + c ; si va nella colonna con il nome delle colonne (\u00e8 la prima); si digita | , si scrive ^t e si pigia INVIO (saranno selezionate tutte le colonne che iniziano con il carattere t ); si pigia g* , per attivare il trova e sostituisci via regex ; si scrive ^(t.+)/TR_\\1 e poi INVIO . Tutte le colonne che iniziano per t , avranno un nuovo nome corrispondente al precedente, con TR_ come prefisso. La colonna tabacco , diventerebbe ad esempio TR_tabacco .","title":"Rinominare le colonne in blocco"},{"location":"lavorareColonne/#come-espandere-ridurre-e-rimuovere-colonne","text":"Questi gli shortcut: _ , per espandere la larghezza della colonna corrente, alla larghezza massima del testo contenuto nella stessa, tenendo conto delle righe visualizzate a schermo; g_ , per espandere la larghezza di tutte le colonne, alla larghezza massima del testo contenuto, tenendo conto delle righe visualizzate a schermo; z_ + n , per impostare la larghezza della colonna corrente a n caratteri; - , per nascondere la colonna corrente (viene impostata a 0 la sua larghezza); gv , per scoprire tutte le colonne nascoste; z- , per ridurre la larghezza della colonna corrente alla sua met\u00e0.","title":"Come espandere, ridurre e rimuovere colonne"},{"location":"lavorareColonne/#spostare-una-colonna","text":"Ecco come farlo: Shift+h , sposta la colonna corrente di una posizione a sinistra; Shift+l , sposta la colonna corrente di una posizione a destra.","title":"Spostare una colonna"},{"location":"lavorareColonne/#modificare-una-colonna-tramite-unespressione-python","text":"A questa tabella si vuole assegnare al campo FieldA il valore di FieldB , tutte le volte che FieldA \u00e8 vuoto. FieldA FieldB 1 3 1 12 Questa la procedura: gs per selezionare tutte le righe; g= per scrivere l'espressione Python; aggiungere come espressione FieldB if FieldA==\"\" else FieldA . Ovvero ( FieldA ) \u00e8 uguale FieldB se FieldA non contiene nulla, altrimenti \u00e8 uguale a se stesso (rimane invariato).","title":"Modificare una colonna tramite un'espressione Python"},{"location":"lavorareColonne/#calcoli-per-colonna","text":"\u00c8 possibile avere restituito, per una colonna, il risultato di uno dei calcoli di aggregazione disponibili: Ad esempio per avere la somma dei valori di una colonna con numeri interi: si imposta il tipo di colonna a numero intero (con # ); si digita z+ e poi INVIO ; si digita sum e poi INVIO . In basso, si legger\u00e0 il valore risultante. Nota bene Se nessuna riga \u00e8 selezionata si avr\u00e0 il totale per colonna, altrimenti il calcolo sar\u00e0 applicato per colonna alle sole righe selezionate.","title":"Calcoli per colonna"},{"location":"lavorareColonne/#come-definire-una-colonna-chiave","text":"Per ogni foglio \u00e8 possibile definire una o pi\u00f9 colonne chiave. Hanno due funzioni principali: rimangono fissate sul lato sinistro, quando si naviga orizzontalmente sulla tabella; hanno una funzione speciale quando si fanno certe operazioni (come quelle di JOIN , per alcuni conteggi, ecc.). Per definire una colonna chiave (e vice-versa) si naviga sino alla colonna di interesse e si pigia ! .","title":"Come definire una colonna chiave"},{"location":"lavorareColonne/#manipolare-le-colonne-dal-foglio-delle-colonne","text":"Il foglio delle colonne oltre a dare una visione di insieme, consente di fare delle rapide modifiche in blocco. \u00c8 possibile spostare le colonne con Shift+j e Shift+k , rinominarle con e , impostare il tipo per tutte quelle selezionate, impostare la larghezza per tutte quelle selezionate. Ad esempio a partire dal Parco Circolante dei veicoli dell'Abruzzo, il foglio colonne ( Shift+c ) appare in questo modo. Se si vuole impostare a \"numero intero\" le colonne progressivo e eta_intestatario , bisogner\u00e0 prima selezionarle con s . Poi premere g# .","title":"Manipolare le colonne dal foglio delle colonne"},{"location":"lavorareColonne/#creare-una-nuova-colonna","text":"Sono tre le modalit\u00e0 pi\u00f9 comode: come risultato di un'espressione Python; come risultato di un comando di split ; come risultato di estrazione di una porzione di testo da una colonna.","title":"Creare una nuova colonna"},{"location":"lavorareColonne/#nuova-colonna-tramite-espressione","text":"Ad esempio potrebbe essere utile creare una colonna vero/falso, per tutte le auto del Parco Circolante dei veicoli dell'Abruzzo, con cilindrata maggiore ai 643 (\u00e8 un numero a caso). Per farlo: navigare sino alla colonna cilindrata ; premere % per impostarla come numero decimale; pigiare su = ; nel prompt in basso a sinistra scrivere cilindrata > 643 ; premere Invio . In output qualcosa come quella di sotto, con la nuova colonna risultato di un'espressione Python.","title":"Nuova colonna tramite espressione"},{"location":"lavorareColonne/#nuove-colonne-come-risultato-di-splitting","text":"Si possono creare nuove colonne, come risultato di una suddivisione di una gi\u00e0 esistente. Ad esempio nel campo data_immatricolazione \u00e8 contenuta sia la data che l'orario, separati da spazio (i.e. 1995-04-03 00:00:00 ). Se si vuole suddividerla in due colonne (data e orario), si pu\u00f2 procedere in questo modo: si naviga sino alla colonna data_immatricolazione ; si preme : ; si sceglie la stringa di testo (definibile anche come espressione regolare) da usare come separatore e si scrive in basso a sinistra nel prompt . In questo caso \u00e8 lo spazio; si digita quindi lo spazio e si d\u00e0 Invio . Come output si avr\u00e0 qualcosa come quella di sotto: due colonne frutto della divisione in pi\u00f9 colonne, sfruttando come separatore lo spazio.","title":"Nuove colonne come risultato di splitting"},{"location":"lavorareColonne/#nuove-colonne-come-risultato-di-cattura-e-estrazione","text":"Per farlo ci vogliono delle conoscenze di base sulle espressioni regolari (che sono una conoscenza propedeutica per chiunque lavori con i dati). Se si vuole ad esempio estrarre l'anno dalla celle che contiene il valore 1995-04-03 00:00:00 , baster\u00e0 definire l'espressione regolare che estrae a partire dall'inizio della cella i primi 4 numeri. Che in termini di espressione regolare \u00e8 ^[0-9]{4} . Per creare una nuova colonna a partire dalla definizione di un'espressione regolare da usare come \"estrattore\", si procede in questo modo: si naviga sulla colonna data_immatricolazione ; si pigia ; ; si scrive nel prompt in basso a sinistra ^([0-9]{4}) . Sono state inserite le parentesi tonde, perch\u00e9 la cattura si fa a partire dalla definizione di un gruppo; si pigia Invio . E si ottiene qualcosa come quella di sotto:","title":"Nuove colonne come risultato di cattura e estrazione"},{"location":"lavorareColonne/#trasformare-una-colonna-tramite-espressione-regolare-trova-e-sostituisci","text":"Su ogni colonna \u00e8 possibile fare delle trasformazioni basate su espressioni regolari. Se ad esempio si vogliono rimuovere dalle celle della colonna data_immatricolazione le informazioni sull'orario e passare quindi da 1995-04-03 00:00:00 a 1995-04-03 si pu\u00f2 procedere in questo modo: si selezionano le righe su cui si vuole fare questa trasformazione (se sono tutte il comando \u00e8 gs ); si va nella colonna data_immatricolazione ; si pigia su g* ; si scrive nel prompt .*$/ . Il simbolo / in VisiData separa ci\u00f2 che si cerca, da ci\u00f2 con cui si vuole sostituire. Qui si cerca uno spazio ( ), seguito da qualsiasi carattere sino a fine cella ( .*$ ), e si vuole sostituire con nulla; si pigia Invio (ci vorr\u00e0 un po' di tempo, sono pi\u00f9 di un milione di righe). Il risultato sar\u00e0 qualcosa come quella di sotto: Questo \u00e8 un \"trova e sostituisci\" per colonna.","title":"Trasformare una colonna tramite espressione regolare (trova e sostituisci)"},{"location":"lavorareRighe/","text":"Lavorare sulle righe \u00b6 La cosa pi\u00f9 importante da comprendere \u00e8 come selezionarle e deselezionarle, perch\u00e9 molte delle operazioni vengono eseguite proprio su quelle selezionate. I tasti principali di selezione sono: s , per selezionare la riga corrente; u , per deselezionare la riga corrente; t , per invertire la selezione della riga corrente; gs , per selezionare tutte le righe; gu , per deselezionare tutte le righe; gt , per invertire i criteri di selezione per tutte le righe. Selezione di righe tramite espressione regolare \u00b6 | + termine da ricercare , seleziona tutte le righe in cui c'\u00e8 corrispondenza per la colonna corrente; \\ + termine da ricercare , deseleziona tutte le righe in cui c'\u00e8 corrispondenza per la colonna corrente; g| + termine da ricercare , seleziona tutte le righe in cui c'\u00e8 corrispondenza per una qualsiasi colonna; g\\ + termine da ricercare , deseleziona tutte le righe in cui c'\u00e8 corrispondenza per una qualsiasi colonna; , , dato il valore della cella selezionata, seleziona tutte le righe in cui per la colonna corrente c'\u00e8 corrispondenza; g, , seleziona tutte le righe uguali a quelle corrente. Ad esempio si apre questo file con VisiData: ci si sposta nella colonna provincia_residenza poi si pigia | ; si digita TERAMO ; si preme Invio . ... si ottiene qualcosa come quella di sotto. Selezione di righe tramite espressioni Python \u00b6 \u00c8 possibile fare una selezione di righe tramite un'espressione di Python ( qui per approfondire sui concetti di base delle espressioni). I comandi da tastiera sono: z| , per selezionare tutte le righe in cui l'espressione \u00e8 valida; z\\ , per deselezionare tutte le righe in cui l'espressione \u00e8 valida. Ad esempio se voglio selezionare da questo file tutte le righe relative a donne, la cui provincia di residenza \u00e8 \"Pescara\", questi gli step: gu , per deselezionare tutto; z| , per attivare la selezione tramite espressione Python; scrivendo provincia_residenza == \"PESCARA\" and sesso == \"F\" ; e pigiando su Invio . ... verranno selezionati tutti gli elementi in cui la provincia \u00e8 \"Pescara\" ed il sesso \u00e8 \"F\". Selezione di righe tramite espressioni Python e regex \u00b6 si digita z| ; si scrive l'espressione, come ad esempio re.search(\"^1\", FieldB) and re.search(\"^2\", FieldA) , ovvero tutte le righe in cui il campo FieldB inizia per 1 e il campo FieldA per 2 . Attenzione Per utilizzare le espressioni regolari all'interno di una Python expression bisogna importare il modulo Python re . Qui le note per farlo. Selezionare un numero random di righe \u00b6 aprire una tabella; fare click sulla barra spaziatrice ; scrivere random-rows (si pu\u00f2 scrivere anche soltanto ad esempio ran e autocompletare con TAB ) e premere INVIO ; scrivere il numero di righe random che si vogliono selezionare. Spostare righe \u00b6 Si fa con queste combinazioni: Shift+j , per spostare la riga corrente verso il basso; Shift+k , per spostare la riga corrente verso l'alto. Cancellare righe \u00b6 D per cancellare la riga corrente; G + D per cancellare le righe selezionate. Modificare il contenuto \u00b6 Questi i comandi di base: e , per modificare la cella corrente; Enter , per chiudere la modifica; Control+c , per cancellare la modifica; Control+a , per andare a inizio linea; Control+e , per andare a fine linea; Control+k , per cancellare il contenuto a partire dalla posizione del cursore. Ordinare e filtrare \u00b6 Ordinare righe \u00b6 I tasti [ e ] ordinano i dati rispettivamente in modo crescente e decrescente, a partire dalla colonna attiva. Filtrare righe \u00b6 \u00c8 possibile estrarre in vari modi un campione delle righe della tabella visualizzata. Quello di base \u00e8 a partire dalla selezione delle righe (in uno dei modi visti sopra) e poi pigiare \" . Ad esempio si naviga sino alla colonna marca , si preme | , si scrive chevr , si pigia Invio (vengono selezionati tutti i record associati a CHEVROLET ) e infine si preme \" . Si avr\u00e0 una tabella filtrata, con gli 8814 record relativi a questa marca per l'Abruzzo. Oppure posso farlo a partire da un \"foglio delle frequenze\" (vedi qui ): si naviga sino alla colonna marca ; si pigia Shift+f , che mi da in output il conteggio dei valori distinti per marca (sono pi\u00f9 di un milione di record, ci vorr\u00e0 un po' di tempo); si scorre sino alla riga che contiene la marca che si vuole filtrare; si pigia Invio e si avr\u00e0 una tabella filtrata, con i record relativi a quella marca per l'Abruzzo. Dal foglio delle frequenze \u00e8 possibile filtrare su pi\u00f9 di un elemento: si selezionano ad esempio tre marche, pigiando s per ognuna; si chiude il foglio delle frequenze con q e si torna al foglio dati; si pigia \" e si ottiene una tabella filtrata con i dati relativi alle sole tre marche selezionate prima. Filtro tramite espressione Python \u00b6 \u00c8 possibile filtrare righe tramite un' espressione Python ( qui la documentazione ufficiale e qui una guida che consiglio). Se ad esempio dalla tabella di sotto si volessero soltanto le province con pi\u00f9 di 350.000 abitanti basterebbe: per prima cosa impostare il campo Popolazione come numerico, pigiando # ; pigiare z| per attivare il filtro tramite espressione Python; scrivere l'espressione basata sulla colonna, che qui \u00e8 Popolazione>350000 e poi premere INVIO . In output si avr\u00e0 la selezione di tutte le righe che risolvono l'espressione scritta. Note: nel filtro per espressione c'\u00e8 l'autocompletamento del nome colonna, quindi se si scrive ad esempio Pop e poi si fa click su TAB , viene restituito a schermo Popolazione ; \u00e8 possibile scrivere espressioni complesse, che fanno riferimento a pi\u00f9 colonne. Filtro tramite espressione Python su campo datetime \u00b6 \u00c8 possibile filtrare righe tramite un'espressione Python a partire da campi datetime , dopo averli impostare come data. Usando questo file CSV (by PCM-DPC ), se ad esempio dalla tabella di sotto si volessero soltanto i record con giorno 29: basterebbe: per prima cosa impostare il campo data come data, pigiando @ ; pigiare z| per attivare il filtro tramite espressione Python; scrivere l'espressione basata sulla colonna, che qui \u00e8 data.day == 29 e poi premere INVIO . In output si avr\u00e0 la selezione di tutte le righe che risolvono l'espressione scritta. Osservazioni: oltre a day \u00e8 possibile usare: month , year e hour Se si vogliono ad esempio selezionare soltanto righe con date nel futuro, l'espressione sar\u00e0 data > datetime.datetime.now() . Filtri tramite espressione python, basata su pi\u00f9 colonne \u00b6 Si vogliono ad esempio selezionare tutte le righe in cui il domicilio non \u00e8 n\u00e9 a Palermo, n\u00e9 a Ragusa, ma la cui residenza \u00e8 in una di queste due citt\u00e0. A partire ad esempio da: domicilio residenza PA PA RG RG TO TO VE PA Questa la procedura: pigiare z| per selezionare tramite espressione Python; scrivere re.search(\"^(?!PA|RG).*\", domicilio) and re.search(\"(PA|RG)\", residenza) ; premere INVIO . La prima \u00e8 una speciale condizione di regex , che cerca al negativo. Sar\u00e0 selezionata soltanto la riga seguente: domicilio residenza VE PA Attenzione Questa espressione sfrutta il modulo re di Python, che non \u00e8 importato by default in VisiData. Quindi dovrai aggiungere l'istruzione di import nel file di configurazione .","title":"sulle righe"},{"location":"lavorareRighe/#lavorare-sulle-righe","text":"La cosa pi\u00f9 importante da comprendere \u00e8 come selezionarle e deselezionarle, perch\u00e9 molte delle operazioni vengono eseguite proprio su quelle selezionate. I tasti principali di selezione sono: s , per selezionare la riga corrente; u , per deselezionare la riga corrente; t , per invertire la selezione della riga corrente; gs , per selezionare tutte le righe; gu , per deselezionare tutte le righe; gt , per invertire i criteri di selezione per tutte le righe.","title":"Lavorare sulle righe"},{"location":"lavorareRighe/#selezione-di-righe-tramite-espressione-regolare","text":"| + termine da ricercare , seleziona tutte le righe in cui c'\u00e8 corrispondenza per la colonna corrente; \\ + termine da ricercare , deseleziona tutte le righe in cui c'\u00e8 corrispondenza per la colonna corrente; g| + termine da ricercare , seleziona tutte le righe in cui c'\u00e8 corrispondenza per una qualsiasi colonna; g\\ + termine da ricercare , deseleziona tutte le righe in cui c'\u00e8 corrispondenza per una qualsiasi colonna; , , dato il valore della cella selezionata, seleziona tutte le righe in cui per la colonna corrente c'\u00e8 corrispondenza; g, , seleziona tutte le righe uguali a quelle corrente. Ad esempio si apre questo file con VisiData: ci si sposta nella colonna provincia_residenza poi si pigia | ; si digita TERAMO ; si preme Invio . ... si ottiene qualcosa come quella di sotto.","title":"Selezione di righe tramite espressione regolare"},{"location":"lavorareRighe/#selezione-di-righe-tramite-espressioni-python","text":"\u00c8 possibile fare una selezione di righe tramite un'espressione di Python ( qui per approfondire sui concetti di base delle espressioni). I comandi da tastiera sono: z| , per selezionare tutte le righe in cui l'espressione \u00e8 valida; z\\ , per deselezionare tutte le righe in cui l'espressione \u00e8 valida. Ad esempio se voglio selezionare da questo file tutte le righe relative a donne, la cui provincia di residenza \u00e8 \"Pescara\", questi gli step: gu , per deselezionare tutto; z| , per attivare la selezione tramite espressione Python; scrivendo provincia_residenza == \"PESCARA\" and sesso == \"F\" ; e pigiando su Invio . ... verranno selezionati tutti gli elementi in cui la provincia \u00e8 \"Pescara\" ed il sesso \u00e8 \"F\".","title":"Selezione di righe tramite espressioni Python"},{"location":"lavorareRighe/#selezione-di-righe-tramite-espressioni-python-e-regex","text":"si digita z| ; si scrive l'espressione, come ad esempio re.search(\"^1\", FieldB) and re.search(\"^2\", FieldA) , ovvero tutte le righe in cui il campo FieldB inizia per 1 e il campo FieldA per 2 . Attenzione Per utilizzare le espressioni regolari all'interno di una Python expression bisogna importare il modulo Python re . Qui le note per farlo.","title":"Selezione di righe tramite espressioni Python e regex"},{"location":"lavorareRighe/#selezionare-un-numero-random-di-righe","text":"aprire una tabella; fare click sulla barra spaziatrice ; scrivere random-rows (si pu\u00f2 scrivere anche soltanto ad esempio ran e autocompletare con TAB ) e premere INVIO ; scrivere il numero di righe random che si vogliono selezionare.","title":"Selezionare un numero random di righe"},{"location":"lavorareRighe/#spostare-righe","text":"Si fa con queste combinazioni: Shift+j , per spostare la riga corrente verso il basso; Shift+k , per spostare la riga corrente verso l'alto.","title":"Spostare righe"},{"location":"lavorareRighe/#cancellare-righe","text":"D per cancellare la riga corrente; G + D per cancellare le righe selezionate.","title":"Cancellare righe"},{"location":"lavorareRighe/#modificare-il-contenuto","text":"Questi i comandi di base: e , per modificare la cella corrente; Enter , per chiudere la modifica; Control+c , per cancellare la modifica; Control+a , per andare a inizio linea; Control+e , per andare a fine linea; Control+k , per cancellare il contenuto a partire dalla posizione del cursore.","title":"Modificare il contenuto"},{"location":"lavorareRighe/#ordinare-e-filtrare","text":"","title":"Ordinare e filtrare"},{"location":"lavorareRighe/#ordinare-righe","text":"I tasti [ e ] ordinano i dati rispettivamente in modo crescente e decrescente, a partire dalla colonna attiva.","title":"Ordinare righe"},{"location":"lavorareRighe/#filtrare-righe","text":"\u00c8 possibile estrarre in vari modi un campione delle righe della tabella visualizzata. Quello di base \u00e8 a partire dalla selezione delle righe (in uno dei modi visti sopra) e poi pigiare \" . Ad esempio si naviga sino alla colonna marca , si preme | , si scrive chevr , si pigia Invio (vengono selezionati tutti i record associati a CHEVROLET ) e infine si preme \" . Si avr\u00e0 una tabella filtrata, con gli 8814 record relativi a questa marca per l'Abruzzo. Oppure posso farlo a partire da un \"foglio delle frequenze\" (vedi qui ): si naviga sino alla colonna marca ; si pigia Shift+f , che mi da in output il conteggio dei valori distinti per marca (sono pi\u00f9 di un milione di record, ci vorr\u00e0 un po' di tempo); si scorre sino alla riga che contiene la marca che si vuole filtrare; si pigia Invio e si avr\u00e0 una tabella filtrata, con i record relativi a quella marca per l'Abruzzo. Dal foglio delle frequenze \u00e8 possibile filtrare su pi\u00f9 di un elemento: si selezionano ad esempio tre marche, pigiando s per ognuna; si chiude il foglio delle frequenze con q e si torna al foglio dati; si pigia \" e si ottiene una tabella filtrata con i dati relativi alle sole tre marche selezionate prima.","title":"Filtrare righe"},{"location":"lavorareRighe/#filtro-tramite-espressione-python","text":"\u00c8 possibile filtrare righe tramite un' espressione Python ( qui la documentazione ufficiale e qui una guida che consiglio). Se ad esempio dalla tabella di sotto si volessero soltanto le province con pi\u00f9 di 350.000 abitanti basterebbe: per prima cosa impostare il campo Popolazione come numerico, pigiando # ; pigiare z| per attivare il filtro tramite espressione Python; scrivere l'espressione basata sulla colonna, che qui \u00e8 Popolazione>350000 e poi premere INVIO . In output si avr\u00e0 la selezione di tutte le righe che risolvono l'espressione scritta. Note: nel filtro per espressione c'\u00e8 l'autocompletamento del nome colonna, quindi se si scrive ad esempio Pop e poi si fa click su TAB , viene restituito a schermo Popolazione ; \u00e8 possibile scrivere espressioni complesse, che fanno riferimento a pi\u00f9 colonne.","title":"Filtro tramite espressione Python"},{"location":"lavorareRighe/#filtro-tramite-espressione-python-su-campo-datetime","text":"\u00c8 possibile filtrare righe tramite un'espressione Python a partire da campi datetime , dopo averli impostare come data. Usando questo file CSV (by PCM-DPC ), se ad esempio dalla tabella di sotto si volessero soltanto i record con giorno 29: basterebbe: per prima cosa impostare il campo data come data, pigiando @ ; pigiare z| per attivare il filtro tramite espressione Python; scrivere l'espressione basata sulla colonna, che qui \u00e8 data.day == 29 e poi premere INVIO . In output si avr\u00e0 la selezione di tutte le righe che risolvono l'espressione scritta. Osservazioni: oltre a day \u00e8 possibile usare: month , year e hour Se si vogliono ad esempio selezionare soltanto righe con date nel futuro, l'espressione sar\u00e0 data > datetime.datetime.now() .","title":"Filtro tramite espressione Python su campo datetime"},{"location":"lavorareRighe/#filtri-tramite-espressione-python-basata-su-piu-colonne","text":"Si vogliono ad esempio selezionare tutte le righe in cui il domicilio non \u00e8 n\u00e9 a Palermo, n\u00e9 a Ragusa, ma la cui residenza \u00e8 in una di queste due citt\u00e0. A partire ad esempio da: domicilio residenza PA PA RG RG TO TO VE PA Questa la procedura: pigiare z| per selezionare tramite espressione Python; scrivere re.search(\"^(?!PA|RG).*\", domicilio) and re.search(\"(PA|RG)\", residenza) ; premere INVIO . La prima \u00e8 una speciale condizione di regex , che cerca al negativo. Sar\u00e0 selezionata soltanto la riga seguente: domicilio residenza VE PA Attenzione Questa espressione sfrutta il modulo re di Python, che non \u00e8 importato by default in VisiData. Quindi dovrai aggiungere l'istruzione di import nel file di configurazione .","title":"Filtri tramite espressione python, basata su pi\u00f9 colonne"},{"location":"navigare/","text":"Navigare tra i dati \u00b6 Per muoversi tra le celle si usano le 4 frecce direzionali dalla tastiera o (come vim, da cui nell'uso da tastiera VisiData prende molta ispirazione) h , j , k , l . Per muoversi in modo pi\u00f9 esteso: g + freccia in basso oppure gj , o End , per andare all'ultima riga; g + freccia in alto oppure gk , o Home , per andare alla prima riga; g + freccia a sinistra oppure gh , per andare alla colonna pi\u00f9 a sinistra; g + freccia a destra oppure gl , per andare alla colonna pi\u00f9 a destra; PageDown oppure Control + Shift + f , una pagina in gi\u00f9; PageUp oppure Control + Shift + b , una pagina in alto. Nota bene G \u00e8 il tasto per i comandi \"globali\". Per muoversi tramite ricerca testuale, sfruttando le espressioni regolari: / + regex , cerca in avanti nella colonna corrente; ? + regex , cerca indietro nella colonna corrente; g/ + regex , cerca in avanti in tutte le colonne; g? + regex , cerca indietro in tutte le colonne; Con n e N si va avanti e indietro rispetto agli elementi di output del risultato della ricerca. Infine per saltare a una determinata riga o colonna, rispettivamente zr e zc seguito dal numero di riga e colonna (la numerazione inizia da zero).","title":"Navigare tra i dati"},{"location":"navigare/#navigare-tra-i-dati","text":"Per muoversi tra le celle si usano le 4 frecce direzionali dalla tastiera o (come vim, da cui nell'uso da tastiera VisiData prende molta ispirazione) h , j , k , l . Per muoversi in modo pi\u00f9 esteso: g + freccia in basso oppure gj , o End , per andare all'ultima riga; g + freccia in alto oppure gk , o Home , per andare alla prima riga; g + freccia a sinistra oppure gh , per andare alla colonna pi\u00f9 a sinistra; g + freccia a destra oppure gl , per andare alla colonna pi\u00f9 a destra; PageDown oppure Control + Shift + f , una pagina in gi\u00f9; PageUp oppure Control + Shift + b , una pagina in alto. Nota bene G \u00e8 il tasto per i comandi \"globali\". Per muoversi tramite ricerca testuale, sfruttando le espressioni regolari: / + regex , cerca in avanti nella colonna corrente; ? + regex , cerca indietro nella colonna corrente; g/ + regex , cerca in avanti in tutte le colonne; g? + regex , cerca indietro in tutte le colonne; Con n e N si va avanti e indietro rispetto agli elementi di output del risultato della ricerca. Infine per saltare a una determinata riga o colonna, rispettivamente zr e zc seguito dal numero di riga e colonna (la numerazione inizia da zero).","title":"Navigare tra i dati"},{"location":"note/","text":"Note personali \u00b6 (di Andrea Borruso ) Il grande Jeremy Singer Vine usa VisiData da molto pi\u00f9 tempo di me e ha creato la migliore guida introduttiva dedicata a VisiData, di cui sono orgoglioso di essere nei ringraziamenti . Ne ho attinto a piene mani per scrivere questa e colgo l'occasione per ringraziarlo di cuore pubblicamente. VisiData \u00e8 un'applicazione molto bella, che probabilmente per alcuni diverr\u00e0 (come \u00e8 adesso per me) di uso quotidiano. Jeremy afferma che per analisi complesse, analisi geospaziali, data literature \u00e8 meglio usare altro. Mi sembra sensato. Non sostituisce R o pandas , ma li pu\u00f2 certamente affiancare e spesso precedere nel workflow di lavoro sui dati. \u00c8 un altro strumento che consiglio di aggiungere nella cassetta degli attrezzi. Lo sviluppatore principale di VisiData - Saul Pwanson - e le persone che collaborano con lui sono molto attente alle richieste e alle proposte che vengono dall'esterno, in una bella mescolanza di sensibilit\u00e0 \"tecnologica\" e umana. Ho aperto nel tempo diverse issue a cui \u00e8 stato dato sempre riscontro. Alcune erano da uomo primitivo, altre erano buone: \u00e8 un vero piacere sapere di avere avuto degli effetti nel rilascio della versione 1.5.1 e di essere citato pi\u00f9 volte nelle note di rilascio . Qui vorremmo aggiornare e arricchire nel tempo i testi e si accettano anche proposte di integrazioni , correzioni e modifiche . Alcuni grazie : a Saul Pwanson , per avere inventato VisiData e per essere una persona brillante e generosa; a Anja Kefala , per essere sempre presente e attenta nelle gestione delle issue di progetto e per il contributo allo sviluppo di VisiData; a Jeremy Singer-Vine , per aver scritto la guida VisiData pi\u00f9 bella , per essere una continua fonte di ispirazione; a Ciro Spataro , Gianni Vitrano e Tot\u00f2 Fiandaca , che seguono questa guida dalla sua prima versione, per i loro contributi e i tanti suggerimenti e stimoli; a Martin Donath , per avere inventato Material for MkDocs (il motore di questa guida).","title":"Note"},{"location":"note/#note-personali","text":"(di Andrea Borruso ) Il grande Jeremy Singer Vine usa VisiData da molto pi\u00f9 tempo di me e ha creato la migliore guida introduttiva dedicata a VisiData, di cui sono orgoglioso di essere nei ringraziamenti . Ne ho attinto a piene mani per scrivere questa e colgo l'occasione per ringraziarlo di cuore pubblicamente. VisiData \u00e8 un'applicazione molto bella, che probabilmente per alcuni diverr\u00e0 (come \u00e8 adesso per me) di uso quotidiano. Jeremy afferma che per analisi complesse, analisi geospaziali, data literature \u00e8 meglio usare altro. Mi sembra sensato. Non sostituisce R o pandas , ma li pu\u00f2 certamente affiancare e spesso precedere nel workflow di lavoro sui dati. \u00c8 un altro strumento che consiglio di aggiungere nella cassetta degli attrezzi. Lo sviluppatore principale di VisiData - Saul Pwanson - e le persone che collaborano con lui sono molto attente alle richieste e alle proposte che vengono dall'esterno, in una bella mescolanza di sensibilit\u00e0 \"tecnologica\" e umana. Ho aperto nel tempo diverse issue a cui \u00e8 stato dato sempre riscontro. Alcune erano da uomo primitivo, altre erano buone: \u00e8 un vero piacere sapere di avere avuto degli effetti nel rilascio della versione 1.5.1 e di essere citato pi\u00f9 volte nelle note di rilascio . Qui vorremmo aggiornare e arricchire nel tempo i testi e si accettano anche proposte di integrazioni , correzioni e modifiche . Alcuni grazie : a Saul Pwanson , per avere inventato VisiData e per essere una persona brillante e generosa; a Anja Kefala , per essere sempre presente e attenta nelle gestione delle issue di progetto e per il contributo allo sviluppo di VisiData; a Jeremy Singer-Vine , per aver scritto la guida VisiData pi\u00f9 bella , per essere una continua fonte di ispirazione; a Ciro Spataro , Gianni Vitrano e Tot\u00f2 Fiandaca , che seguono questa guida dalla sua prima versione, per i loro contributi e i tanti suggerimenti e stimoli; a Martin Donath , per avere inventato Material for MkDocs (il motore di questa guida).","title":"Note personali"},{"location":"primiPassi/","text":"Primi passi \u00b6 VisiData si utilizza dalla shell , quindi il primo passo \u00e8 aprirla. File di esempio In questa guida, alle volte si fa riferimento a dei file per sviluppare degli esempi. Questi si trovano nel repo di progetto in questa cartella . Aprire un file \u00b6 Il comando di base \u00e8: vd nomeFile Se il file di input \u00e8 ad esempio questo CSV id,Variable,Value 1,size,55 1,material,wood 2,size,100 2,material,iron 2,shape,round nella shell saranno visualizzati i relativi dati contenuti in esso Tramite URL \u00b6 \u00c8 possibile aprire un file anche a partire dal suo URL pubblico. Ad esempio: vd \"https://raw.githubusercontent.com/ondata/guidaVisiData/master/docs/dati/inputFileOne.csv\" Formati file \u00b6 VisiData supporta decine di formati di file: tra questi TSV , CSV , sqlite , JSON , XML , XLSX , html , ecc.. Il suo formato di default \u00e8 il TSV . Nota bene Se il file non ha estensione - ad esempio si chiama input - e lo apri con vd input , VisiData lo interpreter\u00e0 come un TSV. L'interpretazione del formato viene fatta in due modi: se il file ha l'estensione, viene ricavato da questa; oppure si pu\u00f2 forzare il formato con un'opzione in apertura. Se si vuole ad esempio che il file sia interpretato come un JSON, il comando sar\u00e0 vd -f json input .","title":"Primi passi"},{"location":"primiPassi/#primi-passi","text":"VisiData si utilizza dalla shell , quindi il primo passo \u00e8 aprirla. File di esempio In questa guida, alle volte si fa riferimento a dei file per sviluppare degli esempi. Questi si trovano nel repo di progetto in questa cartella .","title":"Primi passi"},{"location":"primiPassi/#aprire-un-file","text":"Il comando di base \u00e8: vd nomeFile Se il file di input \u00e8 ad esempio questo CSV id,Variable,Value 1,size,55 1,material,wood 2,size,100 2,material,iron 2,shape,round nella shell saranno visualizzati i relativi dati contenuti in esso","title":"Aprire un file"},{"location":"primiPassi/#tramite-url","text":"\u00c8 possibile aprire un file anche a partire dal suo URL pubblico. Ad esempio: vd \"https://raw.githubusercontent.com/ondata/guidaVisiData/master/docs/dati/inputFileOne.csv\"","title":"Tramite URL"},{"location":"primiPassi/#formati-file","text":"VisiData supporta decine di formati di file: tra questi TSV , CSV , sqlite , JSON , XML , XLSX , html , ecc.. Il suo formato di default \u00e8 il TSV . Nota bene Se il file non ha estensione - ad esempio si chiama input - e lo apri con vd input , VisiData lo interpreter\u00e0 come un TSV. L'interpretazione del formato viene fatta in due modi: se il file ha l'estensione, viene ricavato da questa; oppure si pu\u00f2 forzare il formato con un'opzione in apertura. Se si vuole ad esempio che il file sia interpretato come un JSON, il comando sar\u00e0 vd -f json input .","title":"Formati file"},{"location":"release/","text":"Versione Data di rilascio Dettagli 2.7 2021-11-15 2.6 2021-09-20","title":"Versioni"},{"location":"ricette/","text":"Ricette \u00b6 Filtrare un campo con delle date \u00b6 Si ha a disposizione un file come quello di sotto, da cui si vogliono estrarre soltanto le righe che contengono date comprese tra i giorni 8 agosto 2020 e 2 maggio 2023. Nota bene, il campo data di questo CSV ha una struttura YYYY-MM-DD , che consente di usare in modo \"nativo\" le funzioni Python sulle date. id,data 1,2020-12-05 2,2020-07-08 3,2024-12-05 Questi i passi da eseguire: si va sulla colonna data ; si imposta per questa il tipo di campo, indicando che \u00e8 un campo che contiene date, facendo click su @ ; si fa click su z| per applicare un'espressione Python (vedi sotto); si scrive un'espressione coerente con gli obiettivi e si fa click su INVIO . L'espressione per applicare il filtro descritto sopra \u00e8: data > datetime . date ( 2020 , 8 , 8 ) and data < datetime . date ( 2023 , 5 , 2 ) Sar\u00e0 selezionata soltanto la riga 1,2020-12-05 . Salvare una tabella HTML in CSV, a partire da una pagina web \u00b6 In questo esempio il presupposto \u00e8 che si voglia trasformare in CSV una tabella HTML presente in una pagina web, in cui ci sono pi\u00f9 tabelle. Il punto di partenza \u00e8 quello di estrarre dalla pagina sorgente, una pagina HTML che contiene soltanto la tabella di interesse. La pagina di esempio \u00e8: https://web.archive.org/web/20190618071304/http://www.sias.regione.sicilia.it/NHEOWLH140_00_1.html Questa \u00e8 composta da diverse tabelle. Quella di interesse \u00e8 l'unica composta da pi\u00f9 di 7 colonne, e la query XPATH per estrarla \u00e8 //table[count(tr/td)>7] . La pagina di origine ha l' encoding in ISO-8859-1 , ed \u00e8 da convertire in UTF-8 . Per scaricare la pagina, cambiarne l' encoding ed estrarre la tabella di interesse il comando pu\u00f2 essere curl \"http://www.sias.regione.sicilia.it/NHEOWLH140_00_1.html\" | \\ iconv -f ISO-8859-1 -t utf-8 | \\ scrape -be '//table[count(tr/td)>7]' L' utility usata sopra per fare la query XPATH \u00e8 scrape-cli . In output si ha una pagina web che contiene soltanto la tabella di interesse. Per passarla a VisiData bisogner\u00e0 modificare cos\u00ec lo script: curl \"http://www.sias.regione.sicilia.it/NHEOWLH140_00_1.html\" | \\ iconv -f ISO-8859-1 -t utf-8 | \\ scrape -be '//table[count(tr/td)>7]' | \\ vd -f html Come risultato si aprir\u00e0 la finestra di sotto. Per aprire la tabella sar\u00e0 necessario premere INVIO e poi si potr\u00e0 salvare la tabella in CSV (o altri formati) digitando CTRL+ s . Se si vuole inserire nello script anche la procedura di salvataggio, bisogna modificare lo script in questo modo: curl \"http://www.sias.regione.sicilia.it/NHEOWLH140_00_1.html\" | \\ iconv -f ISO-8859-1 -t utf-8 | \\ scrape -be '//table[count(tr/td)>7]' | \\ vd -b -f html -o out.csv -p dive.vd Note: -b \u00e8 per eseguire VisiData senza interfaccia; -p dive.vd per eseguire dei comandi (qui semplicemente l'apertura della tabella a partire dalla finestra iniziale di sopra). Nel file dive.vd c'\u00e8 il seguente contenuto. sheet col row longname input keystrokes comment open-file - o - 0 dive-row ^J Il file di sopra \u00e8 un file di log di VisiData (vedi sezione dedicata ). Tutte le operazioni fatte in VisiData finiscono in un log che pu\u00f2 essere visualizzato e salvato. Quindi \u00e8 possibile salvare la visualizzazione dell'elenco delle tabelle e poi l'apertura di quella di interesse. Per creare questo di sopra: arrivare a visualizzare la tabella su VisiData; digitare INVIO ; digitate SHIFT + d per visualizzare il log dei comandi; e infine CTRL + s per salvare il file dive.vd . Salvare in blocco tutte le tabelle di una pagina web \u00b6 Alle volte in una pagina HTML ci sono pi\u00f9 tabelle. Ad esempio quelle della pagina sul rapporto \" Ecosistema urbano di Legambiente e Ambiente Italia \". Per scaricarle e salvarle tutte, questi i passi da seguire: aprire la pagina, specificando con --save-filetype=csv quale sar\u00e0 il formato in cui si vorranno salvare le tabelle; vd https://lab24.ilsole24ore.com/ecosistema-urbano/indexT.php --save-filetype=csv una volta aperto VisiData, rimanere nelle prima colonna e selezionare tutto con gs ; la prima colonna contiene il nome delle tabelle. In questo caso sono una ventina e hanno tutte lo stesso nome. Per poterle salvare, senza sovrascriversi a vicenda (hanno tutte lo stesso nome), rinominarle con gi che creer\u00e0 in quella colonna - per ogni cella - un progressivo numerico a partire da 1 ; lanciare il comando per salvare tutte le tabelle (che sono gi\u00e0 selezionate), ovvero g+CTRL+s ; indicare come output la cartella corrente ./ (occhio quindi, verificare che non ci sia nulla di importante dentro) e dare INVIO; verr\u00e0 chiesto il permesso di sovrascrivere; rispondere con yes . Nella cartella di lavoro saranno disponibili tutte le tabelle, in formato CSV . Nota bene: la ricetta \u00e8 stata stimolata da questa domanda . Salvare un flusso di lavoro \u00b6 Introduzione \u00b6 In VisiData \u00e8 possibile salvare il log delle operazione fatte e riutilizzarlo per applicarle nuovamente al file di input. Se ad esempio a partire da questo file CSV (sotto l'anteprima) si volessero cancellare tutte le righe che contengono il solo carattere a nella prima colonna e infine salvare l' output , la procedura \u00e8: vd input.csv ; posizionarsi nella prima colonna e pigiare | per attivare la selezione tramite espressione regolare, scrivere ^a$ e premere INVIO . Verr\u00e0 fatta la selezione descritta; pigiare in sequenza g e d per cancellare le righe selezionate; poi CTRL+s ; e infine scegliere un nome di output (ad esempio output.csv ) e pigiare INVIO per salvare il file. field1 field2 a 0 b 3 a 4 c 5 Per salvare la procedura di sopra in un file di log, bisogner\u00e0 premere CTRL+d , scegliere un nome per salvare il file (ad esempio cancella_le_a.vd ) e pigiare INVIO . Il file di log salvato avr\u00e0 un contenuto come quello sottostante ( \u00e8 un file TSV ), in cui sono \"mappate\" tutte le operazioni fatte: sheet col row longname input keystrokes comment global null_value set-option open-file input.csv o input field1 select-col-regex ^a$ input delete-selected gd delete (cut) selected rows and move them to clipboard input save-sheet output.csv ^S save current sheet to filename in format determined by extension (default .tsv) Per riapplicare la stessa procedura al file, senza interagire con lo schermo, il comando da lanciare \u00e8: vd -b -p cancella_le_a.vd -b per eseguire VisiData senza attivarne l'interfaccia; -p per replicare un file di log. Se questo comando si lancia dopo avere gi\u00e0 creato il file di output , si avr\u00e0 un messaggio di errore, che avvisa che il file esiste gi\u00e0 e non pu\u00f2 essere sovrascritto. Per fare in modo che venga sovrascritto bisogner\u00e0 aggiungere l'opzione -y : vd -y -b -p cancella_le_a.vd A schermo verr\u00e0 restituito l'elenco delle operazione svolte: opening cancella_le_a.vd as vd \"input.csv\" opening input.csv as csv select rows matching regex in current column \"^a$\" search wrapped 2 matches for /^a$/ selected 2 rows delete (cut) selected rows and move them to clipboard copied 2 rows to clipboard deleted 2 rows save current sheet to filename in format determined by extension (default .tsv) \"output.csv\" saving 1 sheets to output.csv as csv replay complete Applicare lo stesso flusso a un file diverso, ma omologo \u00b6 Spesso si ha la necessit\u00e0 di applicare una stessa procedura ad altri file , con la stessa struttura , ma con contenuti differenti . Per utilizzare il file di log creato con un file diverso da input.csv , bisogner\u00e0 modificare il file di log (si modifica con qualsiasi editor di testo): rimuovere la riga con il riferimento a input.csv rimuovere il riferimento al nome del foglio (qui \u00e8 input , come il nome del file). Diventer\u00e0 quindi: sheet col row longname input keystrokes comment global null_value set-option field1 select-col-regex ^a$ delete-selected gd delete (cut) selected rows and move them to clipboard save-sheet output.csv ^S save current sheet to filename in format determined by extension (default .tsv) Fatto questo, il comando da usare con un nuovo file denominato ad esempio input_nuovo.csv sar\u00e0: vd -y -b -p cancella_le_a.vd input_nuovo.csv In output verr\u00e0 creato il file output.csv . Se si vuole creare un file di output con nome diverso, si deve cancellare dal file di log la riga in cui si fa riferimento a output.csv e lanciare il comando: vd -y -b -p cancella_le_a.vd input_nuovo.csv -o output_nuovo.csv Nota sul file di log \u00b6 Si tratta di un TSV, quindi \u00e8 possibile leggerlo e modificarlo proprio con VisiData : Fare il redirect dell'output verso lo stdout \u00b6 Il comando vd input.csv -b --save-filetype json | jq . invier\u00e0 ad esempio a jq un output JSON a partire dal CSV di input . Se ad esempio si vuole passare l'output a grep: vd input.csv -b --save-filetype tsv 2> /dev/null | grep 'a' 2> /dev/null per non avere stderr a schermo. Creare un grafico di dispersione (scatter plot) \u00b6 VisiData pu\u00f2 stampare a schermo anche dei grafici XY. Non \u00e8 un suo punto di forza, ma pu\u00f2 essere utile per avere una prima e grezza visualizzazione spaziale dell'insieme dei dati. Il requisito per crearne uno, \u00e8 avere due colonne numeriche, da usare come coppia di coordinate. Qualcosa come quella di sotto. fid X Y 1 12.29 43.76 2 12.16 43.64 3 12.15 43.65 4 12.16 43.63 ... ... ... Per generare il grafico baster\u00e0 seguire i seguenti passi: impostare come numeriche (numeri decimali digitando % sulla colonna, o # per numeri interi) le due colonne con le coordinate; impostare come colonna chiave la colonna con le ascisse, selezionandola e digitando ! ; selezionare la colonna con le ordinate e digitare . . In output si avr\u00e0 qualcosa come quella di sotto","title":"Ricette"},{"location":"ricette/#ricette","text":"","title":"Ricette"},{"location":"ricette/#filtrare-un-campo-con-delle-date","text":"Si ha a disposizione un file come quello di sotto, da cui si vogliono estrarre soltanto le righe che contengono date comprese tra i giorni 8 agosto 2020 e 2 maggio 2023. Nota bene, il campo data di questo CSV ha una struttura YYYY-MM-DD , che consente di usare in modo \"nativo\" le funzioni Python sulle date. id,data 1,2020-12-05 2,2020-07-08 3,2024-12-05 Questi i passi da eseguire: si va sulla colonna data ; si imposta per questa il tipo di campo, indicando che \u00e8 un campo che contiene date, facendo click su @ ; si fa click su z| per applicare un'espressione Python (vedi sotto); si scrive un'espressione coerente con gli obiettivi e si fa click su INVIO . L'espressione per applicare il filtro descritto sopra \u00e8: data > datetime . date ( 2020 , 8 , 8 ) and data < datetime . date ( 2023 , 5 , 2 ) Sar\u00e0 selezionata soltanto la riga 1,2020-12-05 .","title":"Filtrare un campo con delle date"},{"location":"ricette/#salvare-una-tabella-html-in-csv-a-partire-da-una-pagina-web","text":"In questo esempio il presupposto \u00e8 che si voglia trasformare in CSV una tabella HTML presente in una pagina web, in cui ci sono pi\u00f9 tabelle. Il punto di partenza \u00e8 quello di estrarre dalla pagina sorgente, una pagina HTML che contiene soltanto la tabella di interesse. La pagina di esempio \u00e8: https://web.archive.org/web/20190618071304/http://www.sias.regione.sicilia.it/NHEOWLH140_00_1.html Questa \u00e8 composta da diverse tabelle. Quella di interesse \u00e8 l'unica composta da pi\u00f9 di 7 colonne, e la query XPATH per estrarla \u00e8 //table[count(tr/td)>7] . La pagina di origine ha l' encoding in ISO-8859-1 , ed \u00e8 da convertire in UTF-8 . Per scaricare la pagina, cambiarne l' encoding ed estrarre la tabella di interesse il comando pu\u00f2 essere curl \"http://www.sias.regione.sicilia.it/NHEOWLH140_00_1.html\" | \\ iconv -f ISO-8859-1 -t utf-8 | \\ scrape -be '//table[count(tr/td)>7]' L' utility usata sopra per fare la query XPATH \u00e8 scrape-cli . In output si ha una pagina web che contiene soltanto la tabella di interesse. Per passarla a VisiData bisogner\u00e0 modificare cos\u00ec lo script: curl \"http://www.sias.regione.sicilia.it/NHEOWLH140_00_1.html\" | \\ iconv -f ISO-8859-1 -t utf-8 | \\ scrape -be '//table[count(tr/td)>7]' | \\ vd -f html Come risultato si aprir\u00e0 la finestra di sotto. Per aprire la tabella sar\u00e0 necessario premere INVIO e poi si potr\u00e0 salvare la tabella in CSV (o altri formati) digitando CTRL+ s . Se si vuole inserire nello script anche la procedura di salvataggio, bisogna modificare lo script in questo modo: curl \"http://www.sias.regione.sicilia.it/NHEOWLH140_00_1.html\" | \\ iconv -f ISO-8859-1 -t utf-8 | \\ scrape -be '//table[count(tr/td)>7]' | \\ vd -b -f html -o out.csv -p dive.vd Note: -b \u00e8 per eseguire VisiData senza interfaccia; -p dive.vd per eseguire dei comandi (qui semplicemente l'apertura della tabella a partire dalla finestra iniziale di sopra). Nel file dive.vd c'\u00e8 il seguente contenuto. sheet col row longname input keystrokes comment open-file - o - 0 dive-row ^J Il file di sopra \u00e8 un file di log di VisiData (vedi sezione dedicata ). Tutte le operazioni fatte in VisiData finiscono in un log che pu\u00f2 essere visualizzato e salvato. Quindi \u00e8 possibile salvare la visualizzazione dell'elenco delle tabelle e poi l'apertura di quella di interesse. Per creare questo di sopra: arrivare a visualizzare la tabella su VisiData; digitare INVIO ; digitate SHIFT + d per visualizzare il log dei comandi; e infine CTRL + s per salvare il file dive.vd .","title":"Salvare una tabella HTML in CSV, a partire da una pagina web"},{"location":"ricette/#salvare-in-blocco-tutte-le-tabelle-di-una-pagina-web","text":"Alle volte in una pagina HTML ci sono pi\u00f9 tabelle. Ad esempio quelle della pagina sul rapporto \" Ecosistema urbano di Legambiente e Ambiente Italia \". Per scaricarle e salvarle tutte, questi i passi da seguire: aprire la pagina, specificando con --save-filetype=csv quale sar\u00e0 il formato in cui si vorranno salvare le tabelle; vd https://lab24.ilsole24ore.com/ecosistema-urbano/indexT.php --save-filetype=csv una volta aperto VisiData, rimanere nelle prima colonna e selezionare tutto con gs ; la prima colonna contiene il nome delle tabelle. In questo caso sono una ventina e hanno tutte lo stesso nome. Per poterle salvare, senza sovrascriversi a vicenda (hanno tutte lo stesso nome), rinominarle con gi che creer\u00e0 in quella colonna - per ogni cella - un progressivo numerico a partire da 1 ; lanciare il comando per salvare tutte le tabelle (che sono gi\u00e0 selezionate), ovvero g+CTRL+s ; indicare come output la cartella corrente ./ (occhio quindi, verificare che non ci sia nulla di importante dentro) e dare INVIO; verr\u00e0 chiesto il permesso di sovrascrivere; rispondere con yes . Nella cartella di lavoro saranno disponibili tutte le tabelle, in formato CSV . Nota bene: la ricetta \u00e8 stata stimolata da questa domanda .","title":"Salvare in blocco tutte le tabelle di una pagina web"},{"location":"ricette/#salvare-un-flusso-di-lavoro","text":"","title":"Salvare un flusso di lavoro"},{"location":"ricette/#fare-il-redirect-delloutput-verso-lo-stdout","text":"Il comando vd input.csv -b --save-filetype json | jq . invier\u00e0 ad esempio a jq un output JSON a partire dal CSV di input . Se ad esempio si vuole passare l'output a grep: vd input.csv -b --save-filetype tsv 2> /dev/null | grep 'a' 2> /dev/null per non avere stderr a schermo.","title":"Fare il redirect dell'output verso lo stdout"},{"location":"ricette/#creare-un-grafico-di-dispersione-scatter-plot","text":"VisiData pu\u00f2 stampare a schermo anche dei grafici XY. Non \u00e8 un suo punto di forza, ma pu\u00f2 essere utile per avere una prima e grezza visualizzazione spaziale dell'insieme dei dati. Il requisito per crearne uno, \u00e8 avere due colonne numeriche, da usare come coppia di coordinate. Qualcosa come quella di sotto. fid X Y 1 12.29 43.76 2 12.16 43.64 3 12.15 43.65 4 12.16 43.63 ... ... ... Per generare il grafico baster\u00e0 seguire i seguenti passi: impostare come numeriche (numeri decimali digitando % sulla colonna, o # per numeri interi) le due colonne con le coordinate; impostare come colonna chiave la colonna con le ascisse, selezionandola e digitando ! ; selezionare la colonna con le ordinate e digitare . . In output si avr\u00e0 qualcosa come quella di sotto","title":"Creare un grafico di dispersione (scatter plot)"},{"location":"sostieni/","text":"Sostenere lo sviluppo di VisiData \u00b6 Se VisiData ti piace e lo usi, puoi supportarne lo sviluppo con una donazione . Si fa da qui https://www.patreon.com/saulpw . Sostieni VisiData Sostenere l'associazione onData \u00b6 Se questa guida ti \u00e8 stata utile, puoi sostenere l' associazione onData facendo una donazione , \ud83d\ude4f grazie ! Sostieni onData","title":"Sostieni"},{"location":"sostieni/#sostenere-lo-sviluppo-di-visidata","text":"Se VisiData ti piace e lo usi, puoi supportarne lo sviluppo con una donazione . Si fa da qui https://www.patreon.com/saulpw . Sostieni VisiData","title":"Sostenere lo sviluppo di VisiData"},{"location":"sostieni/#sostenere-lassociazione-ondata","text":"Se questa guida ti \u00e8 stata utile, puoi sostenere l' associazione onData facendo una donazione , \ud83d\ude4f grazie ! Sostieni onData","title":"Sostenere l'associazione onData"}]}